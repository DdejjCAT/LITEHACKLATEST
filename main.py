print("–ó–∞–≥—Ä—É–∂–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
import uuid
from datetime import datetime, timezone
import dateutil.parser
import httpx
import ast
from datetime import datetime
import aiohttp
from aiohttp import BasicAuth
import traceback
import os
import sys
import random
import platform
import termcolor
from cfonts import render
from pyfiglet import Figlet
from datetime import datetime, timezone
import json
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
import asyncio
import re
import time
import logging
from telethon import TelegramClient, events, functions, types
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest, UpdateStatusRequest
from telethon.tl.types import UserStatusOffline, UserStatusOnline
import hashlib
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import (
    InputPeerUser, InputPeerChannel,
    InputReportReasonSpam, InputReportReasonPornography, InputReportReasonViolence,
    InputReportReasonChildAbuse, InputReportReasonCopyright, InputReportReasonFake,
    InputReportReasonGeoIrrelevant, InputReportReasonOther
)
from bs4 import BeautifulSoup
from io import BytesIO
import shutil
from pathlib import Path
from uuid import uuid4
import configparser
from yt_dlp import YoutubeDL
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import subprocess
from art import text2art
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (InlineQueryResultArticle, InputTextMessageContent,
                           InlineKeyboardMarkup, InlineKeyboardButton)

# ==================== –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ====================
def load_config():
    config = {}
    try:
        with open('config.txt', 'r') as f:
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    config[key.strip()] = value.strip().strip('"\'')
    except FileNotFoundError:
        print("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    return config


from telethon.tl.functions.channels import GetParticipantRequest
from telethon.tl.types import ChannelParticipantAdmin, ChannelParticipantCreator
from telethon.errors.rpcerrorlist import UserNotParticipantError


class BaseChannelChecker:
    def __init__(self, client, channel_url):
        self.client = client
        self.channel_url = channel_url

    async def is_member(self, user_id: int) -> bool:
        try:
            entity = await self.client.get_entity(self.channel_url)
            participant = await self.client(GetParticipantRequest(entity, user_id))

            if isinstance(participant.participant, (ChannelParticipantAdmin, ChannelParticipantCreator)):
                return True
            elif hasattr(participant.participant, 'date'):
                return True
            else:
                print("[‚ùå] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏")
                return False

        except UserNotParticipantError:
            print("[‚ùå] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏, –∫—É–ø–∏—Ç—å - @error_kill")
            return False
        except Exception as e:
            print(f"[‚ö†] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}, –Ω–∞–ø–∏—à–∏—Ç–µ: @error_kill")
            return False


class LicenseChecker(BaseChannelChecker):
    async def check_license(self, user_id: int) -> bool:
        return await self.is_member(user_id)


class VipChecker(BaseChannelChecker):
    async def check_vip(self, user_id: int) -> bool:
        return await self.is_member(user_id)
        
config = load_config()
api_id = int(config.get('api_id', 0))
api_hash = config.get('api_hash', '')
phone_number = config.get('phone_number', '')
session_name = config.get('session_name', 'session')
BOT_USERNAME = config.get('BOT_USERNAME', '')
STAT_BOT_USERNAME = config.get('STAT_BOT_USERNAME', '')

client = TelegramClient(session_name, api_id, api_hash)
# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
OWNER_USER_ID = None
last_vip_status = None
last_notified_expiry = None
KEY = b'0123456789abcdef0123456789abcdef'  # 32 bytes
IV = b'abcdef9876543210'  # 16 bytes
PROTECTED_USER_ID = 7404596587
admin_enabled = False
MAX_ERRORS_DISPLAY = 5
process = None
process_lock = asyncio.Lock()
stdout_task = None
ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
output_buffer = []
CONSOLE_REGION = (100, 100, 800, 400)
last_screenshot_hash = None
TERMINAL_REGION = (100, 100, 800, 600)
last_screenshot_time = 0
ASCII_CHARS = "@#=:. "
dp = Dispatcher()
animating = False
stop_requested = False
vanish_enabled = False
pending_dox_requests = {}
auto_sms_targets = {}
muted_users = set()
bite_targets = {}
pending_downloads = {}
active_floods = {}

# ==================== –î–ï–ö–û–†–ê–¢–û–†–´ –î–û–°–¢–£–ü–ê ====================
def vip_only(func):
    async def wrapper(event):
        try:
            is_vip = await vip_checker.is_vip(OWNER_USER_ID)
            is_vip = await vip_checker.is_vip(OWNER_USER_ID)
            
            if not is_vip:
                await event.respond(
                    f"üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è VIP-—Å—Ç–∞—Ç—É—Å\n"
                    f"–í–∞—à —Å—Ç–∞—Ç—É—Å: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
                    f"–ö—É–ø–∏—Ç—å VIP: @error_kill"
                )
                return
                
            return await func(event)
            
        except Exception as e:
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP: {str(e)}")
    return wrapper

def owner_only(func):
    async def wrapper(event):
        if not await is_admin(event.sender_id):
            await event.respond("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(event)
    return wrapper

async def is_admin(user_id):
    return user_id == OWNER_USER_ID

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================
# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
license_checker = LicenseChecker(client, "https://t.me/+HzPHLcDoa044OGVi")
vip_checker = VipChecker(client, "https://t.me/+Q-TGGjUgkNNkMDgy")

async def init_bot():
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —á–µ–∫–µ—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ)
    license_checker = LicenseChecker(client, "https://t.me/+HzPHLcDoa044OGVi")
    vip_checker = VipChecker(client, "https://t.me/+Q-TGGjUgkNNkMDgy")

    if not await license_checker.check_license(OWNER_USER_ID):
        print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        sys.exit(1)
    
    if await vip_checker.is_vip(OWNER_USER_ID):
        print("üíé VIP –∞–∫—Ç–∏–≤–µ–Ω")
    else:
        print("‚ö†Ô∏è VIP –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")


async def verify_captcha():
    async with aiohttp.ClientSession() as session:
        async with session.get("https://fenst4r.life/api/captcha?link=true") as resp:
            try:
                data = await resp.json(content_type=None)
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:", e)
                sys.exit(1)

        if not data.get("link"):
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–ø—á—É, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç")
            sys.exit(1)

        print(f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{data['link']}")

        captcha_id = data['id']
        check_url = f"https://fenst4r.life/api/captcha/result/{captcha_id}"

        max_attempts = 4
        wait_seconds = 15

        for i in range(max_attempts):
            try:
                async with session.get(check_url) as resp:
                    if resp.status == 404:
                        print(f"‚è≥ –ö–∞–ø—á–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (404). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_seconds} —Å–µ–∫...")
                    elif resp.status != 200:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–ø—á–∏: {resp.status}")
                    else:
                        try:
                            result = await resp.json(content_type=None)
                            status = result.get("status")

                            if status == "success":
                                print("‚úÖ –ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!")
                                return True
                            elif status == "fail":
                                print("‚ùå –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.")
                                sys.exit(1)
                            else:
                                print(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏... {i+1}/{max_attempts} "
                                      f"(–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {(max_attempts - i - 1) * wait_seconds} —Å–µ–∫)")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ JSON: {e}")
                            print(f"–û—Ç–≤–µ—Ç: {await resp.text()}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")

            if i < max_attempts - 1:
                await asyncio.sleep(wait_seconds)

        print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.")
        sys.exit(1)


# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================
license_checker = LicenseChecker(client, "https://t.me/+HzPHLcDoa044OGVi")
vip_checker = VipChecker(client, "https://t.me/+Q-TGGjUgkNNkMDgy")

async def init_bot():
    # –ö—Ä–∞—à–Ω–µ–º—Å—è –≤–Ω—É—Ç—Ä–∏ verify_captcha –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
    await verify_captcha()

    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
    await client.start(phone=phone_number)
    me = await client.get_me()
    if me is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        sys.exit(1)

    global OWNER_USER_ID
    OWNER_USER_ID = me.id

    # –õ–æ–≥ –∞–¥–º–∏–Ω–∞
    if OWNER_USER_ID == PROTECTED_USER_ID:
        print(f"üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (PROTECTED_USER_ID).")

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(monitor_license())

    # ==================== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —á–µ—Ä–µ–∑ —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª–µ ====================
    is_licensed = await license_checker.is_member(OWNER_USER_ID)
    if not is_licensed:
        print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await client.disconnect()
        sys.exit(1)
    else:
        print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª!")

    # ==================== –ü—Ä–æ–≤–µ—Ä–∫–∞ VIP —á–µ—Ä–µ–∑ —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª–µ ====================
    is_vip = await vip_checker.is_member(OWNER_USER_ID)
    if is_vip:
        print("üíé VIP –∞–∫—Ç–∏–≤–µ–Ω")
    else:
        print("‚ö†Ô∏è –£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ—Ç VIP. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")


# ==================== –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–∏—Ü–µ–Ω–∑–∏–∏ ====================
async def monitor_license():
    last_license_status = True

    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        current_status = await license_checker.is_member(OWNER_USER_ID)

        if current_status != last_license_status:
            last_license_status = current_status
            if not current_status:
                print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞! –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
                await client.disconnect()
                os._exit(0)


def self_update_main_py():
    import requests, hashlib, os, sys

    url = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKLATEST/main/main.py"
    local_path = "main.py"
    temp_path = "main.py.new"

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        remote_code = response.content
        remote_hash = hashlib.sha256(remote_code).hexdigest()
    except Exception as e:
        print(f"[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ main.py: {e}")
        return False

    if os.path.exists(local_path):
        try:
            with open(local_path, "rb") as f:
                local_code = f.read()
            local_hash = hashlib.sha256(local_code).hexdigest()
            if remote_hash == local_hash:
                return False  # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Ç
        except Exception as e:
            print(f"[‚ö†Ô∏è] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ main.py: {e}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π
    try:
        with open(temp_path, "wb") as f:
            f.write(remote_code)
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è main.py: {e}")
        return False

    # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        os.replace(temp_path, local_path)
        print("[üîÅ] main.py –æ–±–Ω–æ–≤–ª—ë–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –Ω–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False
        
async def monitor_license():
    last_license_status = True

    while True:
        await asyncio.sleep(60)

        checker = LicenseChecker(client, "https://t.me/+HzPHLcDoa044OGVi")
        current_status = await checker.check_license(OWNER_USER_ID)

        if current_status != last_license_status:
            last_license_status = current_status

            if not current_status:
                print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞! –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
                await client.disconnect()
                os._exit(0)

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def clear_screen():
    os.system("cls" if platform.system() == "Windows" else "clear")

def get_lol_quote():
    return random.choice([
        "–®—Ç–∏—Ä–ª–∏—Ü –∏–≥—Ä–∞–ª –≤ –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª—Å—è. –ù–æ –®—Ç–∏—Ä–ª–∏—Ü —É–º–µ–ª –¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à—É—é –º–∏–Ω—É –ø—Ä–∏ –ø–ª–æ—Ö–æ–π –∏–≥—Ä–µ. –ö–æ–≥–¥–∞ –®—Ç–∏—Ä–ª–∏—Ü –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–ø–∞–Ω–∏—é, –º–∏–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞.",
        "–®—Ç–∏—Ä–ª–∏—Ü —à–µ–ª –ø–æ –ª–µ—Å—É –∏ —É–≤–∏–¥–µ–ª –≥–æ–ª—É–±—ã–µ –µ–ª–∏. –ö–æ–≥–¥–∞ –æ–Ω –ø–æ–¥–æ—à–µ–ª –ø–æ–±–ª–∏–∂–µ, —Ç–æ —É–≤–∏–¥–µ–ª, —á—Ç–æ –≥–æ–ª—É–±—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –µ–ª–∏, –Ω–æ –µ—â—ë –ø–∏–ª–∏, –∫—É—Ä–∏–ª–∏ —Ç—Ä–∞–≤–∫—É –∏ —Ç–∞–Ω—Ü–µ–≤–∞–ª–∏.",
        "–®—Ç–∏—Ä–ª–∏—Ü —Å–ø—Ä–æ—Å–∏–ª –ö—ç—Ç: –í—ã –ª—é–±–∏—Ç–µ —Ñ–∏–ª—å–º—ã –ø—Ä–æ –ª—é–±–æ–≤—å? –ë–µ—Å—Å–ø–æ—Ä–Ω–æ! ‚Äî –æ—Ç–≤–µ—Ç–∏–ª–∞ –ö—ç—Ç. –ê —è —Å –ø–æ—Ä–Ω–æ, ‚Äî –ø—Ä–∏–∑–Ω–∞–ª—Å—è –®—Ç–∏—Ä–ª–∏—Ü.",
        "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ —Å–µ—Ç–∏... –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ –≤–∏—Ä—Ç",
        "–†–ö–ù –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Å–Ω—é –û—Ç—á–∏–º –ø–æ—Ç–æ–º—É-—á—Ç–æ —ç—Ç–æ –Ω–∞–ø–æ–º–Ω–∏–ª–æ –∏—Ö –¥–µ—Ç—Å—Ç–≤–æ",
        "–õ–æ–ª –∫–µ–∫ —á–µ–±—É—Ä–µ–∫",
        "ÈÄöÂ°îÊãâÊãâÊãâÂ°îÂ°î",
        "–ü–æ–∑–¥–Ω–æ –ø–æ–∑–¥–Ω–æ –ø–æ–∑–¥–Ω–æ –Ω–æ—á—å—é",
        "–°–≤–∏–Ω–∫–∞ –ü–µ–ø–ø–∞",
        "–°–æ–ø–ª–∏ –≤–∫—É—Å–Ω–µ–µ —Å –≥–æ—Ä—á–∏—Ü–µ–π",
        "–Ø –ø–æ–∂–∞–ª–µ–ª —á—Ç–æ –Ω–µ –ø–æ—Å–æ–ª–∏–ª –º–∞—Ç–µ–º–∞—Ç–∏—á–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –µ—ë —Å—ä–µ—Å—Ç—å",
        "–õ—É—á—à–µ –∏–º–µ—Ç—å –¥—Ä—É–≥–∞, —á–µ–º –¥—Ä—É–≥-–¥—Ä—É–≥–∞",
        "–£ –º–µ–Ω—è –Ω–µ —Å—Ç–æ–∏—Ç —Ç–≤–æ—è —Ä–æ–∑–∞ –≤ —Å—Ç–∞–∫–∞–Ω–µ, —É —Ç–µ–±—è –Ω–µ —Ç–µ—á–µ—Ç –∏–∑ –∫—Ä–∞–Ω–∞ –≤–æ–¥–∞...",
        "–ü–†–ï–î–°–¢–ê–í–ò–õ–ò –ï–ë–ê–õ–û –£–ß–ò–¢–ï–õ–Ø –ü–û –ò–ù–§–û–†–ú–ê–¢–ò–ö–ï? =)))",
        "Now Java... –°—É–∫–∞ —è —Å–∞–º –Ω–µ –µ–±—É —á–µ—Å–Ω"
    ])

def print_ascii_titles():
    for text in ['LiteHack', 'V21']:
        output = render(text, colors=['green'], align='center')
        print(output)

def show_random_quote():
    quote = get_lol_quote()
    words = quote.split()
    colored_quote = " ".join([termcolor.colored(word, 'green') for word in words])
    print(colored_quote + " - –ö—Ç–æ-—Ç–æ")
    print()

def load_custom_config(path="options.txt"):
    config = {}
    if not os.path.exists(path):
        raise FileNotFoundError(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    with open(path, 'r', encoding='utf-8') as file:
        for line in file:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'")
                if value == '':
                    value = None
                if value is not None and value.isdigit():
                    value = int(value)
                elif value is not None and value.lower() in ['true', 'false']:
                    value = value.lower() == 'true'
                config[key] = value
    return config

def image_to_ascii(img, width=80):
    img = img.convert("L")
    aspect_ratio = img.height / img.width
    new_height = int(aspect_ratio * width * 0.5)
    img = img.resize((width, new_height))
    pixels = np.array(img)

    ascii_str = ""
    for row in pixels:
        for pixel in row:
            p = int(pixel)
            index = min(p * len(ASCII_CHARS) // 256, len(ASCII_CHARS) - 1)
            ascii_str += ASCII_CHARS[index]
        ascii_str += "\n"
    return ascii_str

def render_text_to_image(text, font_size=40):
    font = ImageFont.load_default()
    dummy_img = Image.new("L", (1, 1))
    draw = ImageDraw.Draw(dummy_img)
    bbox = draw.textbbox((0, 0), text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]

    img = Image.new("L", (text_width + 10, text_height + 10), color=255)
    draw = ImageDraw.Draw(img)
    draw.text((5, 5), text, font=font, fill=0)
    return img

async def get_gif_url(query):
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        url = f"https://giphy.com/search/{query.replace(' ', '-')}"
        
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get(url) as response:
                response.raise_for_status()
                html = await response.text()
        
        soup = BeautifulSoup(html, "html.parser")
        gif_link = soup.find("img", {"class": "giphy-gif-img"})
        
        if gif_link and gif_link.get("src"):
            return gif_link["src"]
        else:
            return None
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Giphy: {e}")
        return None

async def send_to_bot(client, event, bot_username, message_text):
    try:
        bot = await client.get_entity(bot_username)
        async with client.conversation(bot) as conv:
            response = await conv.send_message(message_text)
            await asyncio.sleep(2)

            try:
                response = await conv.get_response()
                await client.send_message(event.chat_id, response)
            except asyncio.TimeoutError:
                await event.respond("–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è.")
            except Exception as e:
                 await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞: {e}")

    except Exception as e:
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –±–æ—Ç—É {bot_username}: {e}")

# ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================
@client.on(events.NewMessage(pattern=r'^fr!profile$'))
async def profile_handler(event):
    user_id = event.sender_id

    license_checker = LicenseChecker(client, "https://t.me/+HzPHLcDoa044OGVi")
    vip_checker = VipChecker(client, "https://t.me/+Q-TGGjUgkNNkMDgy")

    has_license = await license_checker.is_member(user_id)
    is_vip = await vip_checker.is_member(user_id)

    license_status = "‚úÖ –ï—Å—Ç—å" if has_license else "‚ùå –ù–µ—Ç"
    vip_status = "üíé VIP" if is_vip else "‚Äî"

    text = f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å:
ID: `{user_id}`
–õ–∏—Ü–µ–Ω–∑–∏—è: {license_status}
–°—Ç–∞—Ç—É—Å: {vip_status}
"""
    await event.reply(text)

@client.on(events.NewMessage(pattern=r'^fr!ping$'))
async def ping_handler(event):
    start = time.time()
    message = await event.respond('üèì Pong!')
    end = time.time()
    latency = round((end - start) * 1000, 2)
    await message.edit(f'üèì Pong! | {latency}ms')

@client.on(events.NewMessage(pattern=r'^fr!id$'))
async def id_handler(event):
    await event.respond(f"üë§ –í–∞—à ID: `{event.sender_id}`\nüí¨ ID —á–∞—Ç–∞: `{event.chat_id}`",
                        parse_mode='markdown')

@client.on(events.NewMessage(pattern=r'^fr!vipcheck(?: (\d+))?$'))
async def vipcheck(event):
    arg = event.pattern_match.group(1)
    sender_uid = str(event.sender_id)
    url = "https://raw.githubusercontent.com/DdejjCAT/LITEHACKDATABASE/main/database.enc"

    if arg and sender_uid == str(OWNER_USER_ID):
        uid_to_check = arg
    else:
        uid_to_check = sender_uid

    async def get_name(user_id):
        try:
            entity = await client.get_entity(int(user_id))
            if hasattr(entity, 'first_name'):
                first = entity.first_name or ""
                last = getattr(entity, 'last_name', "") or ""
                return (first + " " + last).strip() or str(user_id)
            elif hasattr(entity, 'title'):
                return entity.title
            else:
                return str(user_id)
        except:
            return str(user_id)

    try:
        sender_name = await get_name(sender_uid)
        host_name = await get_name(OWNER_USER_ID)
        check_name = await get_name(uid_to_check)

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    await event.respond("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–π.")
                    return

                encrypted_bytes = await resp.read()
                decrypted_text = decrypt_json(encrypted_bytes, KEY, IV)
                data = decrypted_text

                def user_status(uid):
                    is_admin = uid in data.get("admins", {}) and data["admins"][uid]
                    is_vip = uid in data.get("vip", {})
                    if is_admin and is_vip:
                        return "üíº –ê–¥–º–∏–Ω + üíé VIP"
                    elif is_admin:
                        return "üíº –ê–¥–º–∏–Ω"
                    elif is_vip:
                        return f"üíé VIP –¥–æ `{data['vip'][uid]}`"
                    else:
                        return "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (VIP/ADMIN)"

                msg = (
                    f"üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç: `{sender_name}` (`{sender_uid}`)\n\n"
                    f"üè† –•–æ—Å—Ç: `{host_name}` (`{OWNER_USER_ID}`) ‚Äî {user_status(str(OWNER_USER_ID))}\n\n"
                    f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π: `{check_name}` (`{uid_to_check}`) ‚Äî {user_status(str(uid_to_check))}"
                )
                await event.respond(msg, parse_mode='markdown')

    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VIP/ADMIN: `{e}`", parse_mode='markdown')

@client.on(events.NewMessage(pattern=r'^fr!ascii (.+)$'))
@owner_only
async def ascii_art_handler(event):
    text = event.pattern_match.group(1)
    
    if re.search('[–∞-—è–ê-–Ø]', text):
        await event.respond("–û—à–∏–±–∫–∞: —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã.")
        return
    
    ascii_text = Figlet().renderText(text)
    response = f"```\n {ascii_text[:1999]}{'...' if len(ascii_text) > 1999 else ''}\n```"
    await event.respond(response, parse_mode='markdown')

payment_file = "payment_links.json"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π
if not os.path.exists(payment_file):
    default_links = {
        "basic": "https://t.me/send?start=SBHzPHLcDoa044OGVi",
        "vip": "https://t.me/send?start=SBQ-TGGjUgkNNkMDgy"
    }
    with open(payment_file, "w", encoding="utf-8") as f:
        json.dump(default_links, f, indent=4, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏
with open(payment_file, "r", encoding="utf-8") as f:
    payment_links = json.load(f)

# –ü—Ä–æ–≤–µ—Ä–∫–∞
print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:", payment_links)

@client.on(events.NewMessage(pattern=r'^fr!pay$'))
async def handler(event):
    user_id = event.sender_id
    username = event.sender.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
    license_ok = await license_checker.check_license(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ VIP
    vip_ok = await vip_checker.is_vip(user_id)
    vip_expiry = await vip_checker.get_vip_expiry(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    profile_text = f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å: @{username}
üõ°Ô∏è –õ–∏—Ü–µ–Ω–∑–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if license_ok else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
üåü VIP: {'‚úÖ –¥–æ ' + vip_expiry if vip_ok else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

üíµ –û–ø–ª–∞—Ç–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (1 USDT): {payment_links['license']}
üíé –û–ø–ª–∞—Ç–∞ VIP (2 USDT): {payment_links['vip']}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, —Ç—ã –±—É–¥–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.
"""

    await event.respond(profile_text)
    
@client.on(events.NewMessage(pattern=r'^fr!readall$'))
@owner_only
async def read_all_handler(event):
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        if dialog.unread_count > 0:
            await client.send_read_acknowledge(dialog.entity)
    await event.respond("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")

@client.on(events.NewMessage(pattern=r'^fr!admin (on|off)$'))
@owner_only
async def admin_handler(event):
    global admin_enabled
    cmd = event.pattern_match.group(1).lower()
    if cmd == "on":
        admin_enabled = True
        await event.respond("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.")
    else:
        admin_enabled = False
        await event.respond("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")

@client.on(events.NewMessage(pattern=r'^fr!dox(?: (.*))?'))
@owner_only
async def dox_command(event):
    args = event.pattern_match.group(1)
    
    if not args:
        await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞: fr!dox <–Ω–∏–∫/–∏–º—è/–Ω–æ–º–µ—Ä>")
        return
    
    try:
        if args.startswith('@'):
            args = f"t.me/{args[1:]}"
        
        await send_to_bot(client, event, BOT_USERNAME, args)
        
        if event.is_reply:
            replied_msg = await event.get_reply_message()
            await client.forward_messages(BOT_USERNAME, replied_msg)
            
    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r'^fr!gif '))
@owner_only
async def gif_command(event):
    query = event.message.text[6:].strip()
    
    if not query:
        await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: fr!gif <–∑–∞–ø—Ä–æ—Å>")
        return
    
    gif_url = await get_gif_url(query)

    if gif_url:
        try:
            await client.send_file(event.chat_id, gif_url, caption=f"GIF –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
            await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF")
    else:
        await event.respond(f"üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ GIF –¥–ª—è: {query}")

@client.on(events.NewMessage(pattern=r'^fr!snos(?: (.*))?'))
@owner_only
@vip_only
async def snos_handler(event):
    global process

    args = event.pattern_match.group(1)

    if process is None:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        script_path = os.path.join('addons', 'snos.py')
        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª snos.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ addons/")
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = await asyncio.create_subprocess_exec(
                sys.executable, script_path,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                stdin=asyncio.subprocess.PIPE,
                cwd=os.path.dirname(script_path)  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
            )

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
            message = await event.respond("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–Ω–æ—Å–µ—Ä...")

            async def handle_output():
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞"""
                while True:
                    if process.stdout.at_eof():
                        break
                    line = await process.stdout.readline()
                    if line:
                        try:
                            text = line.decode('utf-8').strip()
                        except UnicodeDecodeError:
                            text = line.decode('cp1251', errors='ignore').strip()
                        
                        if text:
                            try:
                                await message.edit(f"```\n{text}\n```")
                            except:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                message = await event.respond(f"```\n{text}\n```")

            async def handle_stderr():
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞"""
                while True:
                    if process.stderr.at_eof():
                        break
                    line = await process.stderr.readline()
                    if line:
                        error_text = line.decode('utf-8', errors='ignore').strip()
                        if error_text:
                            logging.error(f"[SNOS ERROR] {error_text}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            asyncio.create_task(handle_output())
            asyncio.create_task(handle_stderr())

            logging.info("–°–Ω–æ—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–Ω–æ—Å–µ—Ä–∞")
            process = None
            return

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å
    if args:
        try:
            if process.stdin.is_closing():
                await event.respond("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                process = None
                return
                
            process.stdin.write(f"{args}\n".encode('utf-8'))
            await process.stdin.drain()
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ —Å–Ω–æ—Å–µ—Ä: {args}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
            try:
                await event.delete()
            except Exception as delete_error:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
                
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–Ω–æ—Å–µ—Ä")
@client.on(events.NewMessage(pattern=r'^fr!sn_crash$'))
@owner_only
@vip_only
async def snos_crash_handler(event):
    global process

    if process is None:
        await event.respond("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–Ω–æ—Å–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    try:
        process.terminate()
        await process.wait()
        process = None
        await event.respond("üí• –ü—Ä–æ—Ü–µ—Å—Å —Å–Ω–æ—Å–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫—Ä–∞—à–Ω—É—Ç).")
    except Exception as e:
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∞—à–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

@client.on(events.NewMessage(pattern=r'^fr!vanish$'))
@owner_only
async def toggle_vanish(event):
    global vanish_enabled

    try:
        if not vanish_enabled:
            await client(UpdateStatusRequest(offline=True))
            vanish_enabled = True
            await event.reply("üëª –¢—ã —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–∑—Ä–∞–∫–∞ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç —Ç–µ–±—è –æ–Ω–ª–∞–π–Ω.")
        else:
            await client(UpdateStatusRequest(offline=False))
            vanish_enabled = False
            await event.reply("üîµ –¢—ã —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω, —Ç–µ–±—è –≤–∏–¥—è—Ç.")
    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@client.on(events.NewMessage(pattern=r'^fr!promostart$'))
@owner_only
@vip_only
async def run_yandex_plus_script(event):
    try:
        await event.respond("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞...")

        script_path = os.path.join(os.getcwd(), 'addons', 'start.py')
        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª start.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ addons.")
            logging.error("–§–∞–π–ª start.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        process = await asyncio.create_subprocess_exec(
            PYTHON_EXECUTABLE, 'start.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.path.join(os.getcwd(), 'addons')
        )

        while True:
            line = await process.stdout.readline()
            if not line:
                break
            try:
                text = line.decode().strip()
            except Exception:
                text = line.decode(errors='ignore').strip()

            if text:
                await event.respond(f"<code>{text}</code>", parse_mode='html')
                logging.info(f"[STDOUT] {text}")

        stderr_output = await process.stderr.read()
        if stderr_output:
            err_text = stderr_output.decode(errors='ignore').strip()
            if err_text:
                await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{err_text}</code>", parse_mode='html')
                logging.warning(f"[STDERR] {err_text}")

        await process.wait()

        await event.respond("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logging.info("–°–∫—Ä–∏–ø—Ç start.py –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        await event.respond(msg)
        logging.exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã fr!promostart")

@client.on(events.NewMessage(pattern=r'^fr!anim\s*(.+)?$'))
@owner_only
async def handle_anim(event):
    global animating, stop_requested

    args = (event.pattern_match.group(1) or "").strip().split()

    if not args:
        await event.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏. –ü—Ä–∏–º–µ—Ä: `fr!anim üò∫ 0.3`")
        return

    if args[0].lower() == "stop":
        if animating:
            stop_requested = True
            await event.reply("üõë –ê–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞...")
        else:
            await event.reply("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    emoji = args[0]
    try:
        speed = float(args[1]) if len(args) > 1 else 0.6
        if speed < 0.1 or speed > 5:
            raise ValueError
    except ValueError:
        await event.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç 0.1 –¥–æ 5.0 —Å–µ–∫. –ü—Ä–∏–º–µ—Ä: `fr!anim üò∫ 0.3`")
        return

    if animating:
        await event.reply("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    animating = True
    stop_requested = False

    try:
        me = await client.get_me()
        full = await client(GetFullUserRequest(me.id))

        original_name = me.first_name or ""
        original_bio = full.full_user.about or "–û–ø–∏—Å–∞–Ω–∏–µ"

        def generate_variants(text, symbol):
            variants = []
            for i in range(len(text) + 1):
                variants.append(text[:i] + symbol + text[i:])
            random.shuffle(variants)
            return variants

        names = generate_variants(original_name, emoji)
        bios = generate_variants(original_bio, emoji)

        await event.reply(f"üé¨ –ê–Ω–∏–º–∞—Ü–∏—è —Å —ç–º–æ–¥–∑–∏ `{emoji}` –∑–∞–ø—É—â–µ–Ω–∞. –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} —Å–µ–∫.")

        for _ in range(300):
            if stop_requested:
                break
            new_name = random.choice(names)[:64]
            new_bio = random.choice(bios)[:70]
            await client(UpdateProfileRequest(first_name=new_name, about=new_bio))
            await asyncio.sleep(speed)

        await client(UpdateProfileRequest(first_name=original_name, about=original_bio))
        await event.reply("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        animating = False
        stop_requested = False

@client.on(events.NewMessage(pattern=r'^fr!promoplus$'))
@owner_only
@vip_only
async def run_yandex_plus_script(event):
    try:
        await event.respond("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å...")

        script_path = os.path.join(os.getcwd(), 'addons', 'plus.py')
        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª plus.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ addons.")
            logging.error("–§–∞–π–ª plus.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        process = await asyncio.create_subprocess_exec(
            PYTHON_EXECUTABLE, 'plus.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.path.join(os.getcwd(), 'addons')
        )

        while True:
            line = await process.stdout.readline()
            if not line:
                break
            try:
                text = line.decode().strip()
            except Exception:
                text = line.decode(errors='ignore').strip()

            if text:
                await event.respond(f"<code>{text}</code>", parse_mode='html')
                logging.info(f"[STDOUT] {text}")

        stderr_output = await process.stderr.read()
        if stderr_output:
            err_text = stderr_output.decode(errors='ignore').strip()
            if err_text:
                await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{err_text}</code>", parse_mode='html')
                logging.warning(f"[STDERR] {err_text}")

        await process.wait()

        await event.respond("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logging.info("–°–∫—Ä–∏–ø—Ç plus.py –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        await event.respond(msg)
        logging.exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã fr!promoplus")

@client.on(events.NewMessage(pattern=r'^fr!promoivi$'))
@owner_only
@vip_only
async def run_promo_script(event):
    try:
        await event.respond("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ IVI...")

        script_path = os.path.join(os.getcwd(), 'addons', 'ivi.py')
        if not os.path.exists(script_path):
            await event.respond("‚ùå –§–∞–π–ª ivi.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ addons.")
            logging.error("–§–∞–π–ª ivi.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        process = await asyncio.create_subprocess_exec(
            PYTHON_EXECUTABLE, 'ivi.py',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=os.path.join(os.getcwd(), 'addons')
        )

        while True:
            line = await process.stdout.readline()
            if not line:
                break
            try:
                text = line.decode().strip()
            except Exception:
                text = line.decode(errors='ignore').strip()

            if text:
                await event.respond(f"<code>{text}</code>", parse_mode='html')
                logging.info(f"[STDOUT] {text}")

        stderr_output = await process.stderr.read()
        if stderr_output:
            err_text = stderr_output.decode(errors='ignore').strip()
            if err_text:
                await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n<code>{err_text}</code>", parse_mode='html')
                logging.warning(f"[STDERR] {err_text}")

        await process.wait()

        await event.respond("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ IVI –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        logging.info("–°–∫—Ä–∏–ø—Ç ivi.py –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        await event.respond(msg)
        logging.exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã fr!promoivi")

@client.on(events.NewMessage(pattern=r'^fr!video (.+)$'))
@owner_only
async def handle_video_request(event):
    chat_id = event.chat_id
    user_input = event.pattern_match.group(1).strip()

    url = user_input if user_input.startswith('http') else f"ytsearch1:{user_input}"

    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'skip_download': True,
        'noplaylist': True,
    }

    try:
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

        if 'entries' in info:
            info = info['entries'][0]

        formats = {}
        for f in info.get('formats', []):
            if (
                f.get('acodec') != 'none' and
                f.get('vcodec') != 'none' and
                f.get('ext') == 'mp4' and
                f.get('height')
            ):
                res = str(f['height'])
                formats[res] = f['format_id']

        if not formats:
            await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        sorted_res = sorted(formats.keys(), key=lambda x: int(x))

        pending_downloads[chat_id] = {
            'url': info['webpage_url'],
            'formats': formats,
        }

        if info.get('thumbnail'):
            await client.send_file(chat_id, info['thumbnail'])

        caption = (
            f"üìπ –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info.get('duration', 0)} —Å–µ–∫\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n"
            + "\n".join(f"{res}p" for res in sorted_res) + "\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–∫–∞—á–∞—Ç—å 480p' –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ."
        )

        await event.respond(caption)

    except Exception as e:
        await event.respond(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {str(e)}")

@client.on(events.NewMessage)
async def handle_download_confirmation(event):
    chat_id = event.chat_id
    text = event.raw_text.strip().lower()

    if chat_id in pending_downloads:
        data = pending_downloads[chat_id]
        url = data['url']
        formats = data['formats']

        m = re.search(r'(\d{3,4})', text)
        if (text.startswith('—Å–∫–∞—á–∞—Ç—å') and m) or (text.isdigit() and text in formats):
            res = m.group(1) if m else text
            if res not in formats:
                await event.respond(f"‚ùå –ö–∞—á–µ—Å—Ç–≤–æ {res}p –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return

            format_code = formats[res]

            msg = await event.respond(f"‚è¨ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ {res}p, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            ydl_opts = {
                'format': format_code,
                'outtmpl': f'yt_%(title)s_{res}p.%(ext)s',
                'merge_output_format': 'mp4',
                'quiet': True,
                'no_warnings': True,
                'noplaylist': True,
            }

            try:
                with YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=True)
                    filename = ydl.prepare_filename(info)

                caption = (
                    f"üìπ {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info.get('duration', 0)} —Å–µ–∫\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {info.get('webpage_url', url)}\n\n"
                )

                await client.send_file(chat_id, filename, caption=caption)
                await msg.delete()

                os.remove(filename)

            except Exception as e:
                await msg.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")

            pending_downloads.pop(chat_id, None)

        elif text in ['—Å–∫–∞—á–∞—Ç—å', '–¥–∞', '–æ–∫', 'download']:
            sorted_res = sorted(formats.keys(), key=lambda x: int(x))
            await event.respond(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:\n" + "\n".join(f"{res}p" for res in sorted_res) + "\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–∫–∞—á–∞—Ç—å 480' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '480'."
            )

@client.on(events.NewMessage(pattern=r'^fr!music (yt|sc) (.+)$'))
@owner_only
async def music_handler(event):
    source = event.pattern_match.group(1)
    query = event.pattern_match.group(2).strip()
    chat = await event.get_chat()

    msg = await event.respond(f"–ò—â—É –º—É–∑—ã–∫—É –Ω–∞ {source}... ‚è≥")

    os.makedirs('downloads', exist_ok=True)

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'downloads/%(title)s.%(ext)s',
        'quiet': True,
        'no_warnings': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'progress_hooks': [],
    }

    loop = asyncio.get_event_loop()

    async def progress_hook(d):
        status = d.get('status')
        downloaded = d.get('downloaded_bytes', 0)
        total = d.get('total_bytes') or d.get('total_bytes_estimate')
        percent = (downloaded / total * 100) if total else 0

        if status == 'downloading':
            text = f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {percent:.1f}%"
        elif status == 'finished':
            text = f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: 100%. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è..."
        else:
            text = f"–°—Ç–∞—Ç—É—Å: {status}"

        try:
            await msg.edit(text)
        except Exception:
            pass

    def hook(d):
        asyncio.run_coroutine_threadsafe(progress_hook(d), loop)

    ydl_opts['progress_hooks'].append(hook)

    try:
        if source == 'yt':
            url = f"ytsearch1:{query}"
        elif source == 'sc':
            url = f"scsearch1:{query}"
        else:
            await msg.edit("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
            return

        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            if 'entries' in info:
                info = info['entries'][0]

            filename_base = ydl.prepare_filename(info)
            filename = os.path.splitext(filename_base)[0] + ".mp3"

        await msg.edit(f"–û—Ç–ø—Ä–∞–≤–ª—è—é: {info.get('title', '–¢—Ä–µ–∫')} üéµ")
        await client.send_file(chat, filename)
        os.remove(filename)

    except Exception as e:
        await msg.edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏.")
        logging.exception("–û—à–∏–±–∫–∞ music_handler:")

@client.on(events.NewMessage(pattern=r'fr!tg (\S+)(?: (id))?'))
@owner_only
async def stat_command(event):
    args = event.pattern_match.group(1)
    is_id = event.pattern_match.group(2)

    if not args:
        await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ username –∏–ª–∏ ID: fr!tg <–Ω–∏–∫> –∏–ª–∏ fr!tg <ID> id")
        return

    query = args if is_id else args.lstrip('@')

    if not is_id:
        try:
            await client(ResolveUsernameRequest(query))
        except (UsernameNotOccupiedError, UsernameInvalidError):
            await event.respond("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ username –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return
        except Exception as e:
            await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username: {e}")
            return

    try:
        async with client.conversation(STAT_BOT_USERNAME) as conv:
            await conv.send_message(query if is_id else f"@{query}")

            while True:
                try:
                    response = await conv.get_response(timeout=30)
                    if not ("‚è≥" in response.text or "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in response.text):
                        text = re.sub(r'https://', 'https ://', response.text)
                        text = re.sub(r't\.me/', 't. me/', text)
                        await event.respond(
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {'ID' if is_id else '—é–∑–µ—Ä–Ω–µ–π–º–∞'}: {query}\n\n{text}"
                        )
                        break
                except asyncio.TimeoutError:
                    await event.respond("‚åõ –ë–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
                    break

    except Exception as e:
        await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern=r'^fr!edit (\d{1,2}) (.+)$'))
async def handler_edit(event):
    try:
        count = int(event.pattern_match.group(1))
        new_text = event.pattern_match.group(2)

        async for msg in client.iter_messages(event.chat_id, from_user='me', limit=count + 1):
            if msg.id != event.id:
                await msg.edit(new_text)
        await event.delete()
    except Exception as e:
        await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

@client.on(events.NewMessage(pattern=r'^fr!del (\d+)$'))
async def handler_delete(event):
    try:
        count = int(event.pattern_match.group(1))
        deleted = 0
        cutoff = datetime.now(timezone.utc) - timedelta(days=7)
        messages_to_delete = []

        async for msg in client.iter_messages(event.chat_id, from_user='me', limit=count * 2):
            if msg.date < cutoff:
                continue
            messages_to_delete.append(msg)
            if len(messages_to_delete) >= count:
                break

        if not messages_to_delete:
            await event.respond("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        for msg in messages_to_delete:
            try:
                await client.delete_messages(event.chat_id, msg)
                deleted += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                await event.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}: {e}")

        await event.respond(f"–£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

@client.on(events.NewMessage(pattern=r'^fr!autotype$'))
async def autotype_handler(event):
    chat_id = event.chat_id
    if chat_id in autotyping_chats:
        autotyping_chats.remove(chat_id)
        await event.reply("üõë –ê–≤—Ç–æ–ø–µ—á–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        autotyping_chats.add(chat_id)
        await event.reply("‚å®Ô∏è –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã –ø–µ—á–∞—Ç–∞–µ—Ç–µ...")
        while chat_id in autotyping_chats:
            try:
                async with client.action(chat_id, 'typing'):
                    await asyncio.sleep(4)
            except:
                autotyping_chats.remove(chat_id)

@client.on(events.NewMessage(pattern=r'^fr!mute$'))
async def mute_handler(event):
    if not event.is_reply:
        await event.reply("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—å—é—Ç–∏—Ç—å.")
        return

    reply_msg = await event.get_reply_message()
    user_id = reply_msg.sender_id
    if user_id in muted_users:
        muted_users.remove(user_id)
        await event.reply(f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—å—é—á–µ–Ω.")
    else:
        muted_users.add(user_id)
        await event.reply(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—å—é—á–µ–Ω. –í—Å–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è.")

@client.on(events.NewMessage(incoming=True))
async def auto_delete_muted(event):
    if event.sender_id in muted_users:
        try:
            await event.delete()
        except:
            pass

@client.on(events.NewMessage(pattern=r'^fr!report$'))
@owner_only
async def report_user(event):
    if event.is_reply:
        try:
            replied_msg = await event.get_reply_message()
            reason = InputReportReasonSpam()
            
            await client(functions.messages.ReportRequest(
                peer=event.chat_id,
                id=[replied_msg.id],
                reason=reason,
                message="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            ))
            
            await event.respond("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await event.respond("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")

@client.on(events.NewMessage(pattern=r'^fr!love$'))
@owner_only
async def send_love(event):
    hearts = ['‚ù§Ô∏è', 'üíï', 'üíñ', 'üíó', 'üíò', 'üíù', 'üíû', 'üíì']
    message = await event.respond("–°–æ–∑–¥–∞—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–µ—Ä–¥–µ—á–µ–∫...")
    
    for _ in range(10):
        heart = random.choice(hearts)
        try:
            await message.edit(heart * 10)
            await asyncio.sleep(0.5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
            break

@client.on(events.NewMessage(pattern=r'^fr!roll$'))
async def roll_dice(event):
    result = random.randint(1, 6)
    await event.respond(f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {result}")

@client.on(events.NewMessage(pattern=r'^fr!help$'))
async def help_handler(event):
    help_text = (
        "**üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (–±–µ–∑ –ø–∞—Å—Ö–∞–ª–æ–∫):**\n\n"

        "**üí° –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`fr!ping` ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞\n"
        "`fr!id` ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID –∏ ID —á–∞—Ç–∞\n"
        "`fr!ascii <—Ç–µ–∫—Å—Ç>` ‚Äî ASCII –∞—Ä—Ç (–ª–∞—Ç–∏–Ω–∏—Ü–∞)\n"
        "`fr!readall` ‚Äî –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        
        "**üé≠ –í–Ω–µ—à–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å:**\n"
        "`fr!anim üò∫ 0.3` ‚Äî –ê–Ω–∏–º–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏ –±–∏–æ\n\n"

        "**üí¨ –£—Ç–∏–ª–∏—Ç—ã:**\n"
        "`fr!gif <–∑–∞–ø—Ä–æ—Å>` ‚Äî –ü–æ–∏—Å–∫ –≥–∏—Ñ–∫–∏\n"
        "`fr!dox <–∏–Ω—Ñ–æ>` ‚Äî DOX –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –±–æ—Ç\n"
        "`fr!tg <username|id>` ‚Äî –°—Ç–∞—Ç–∞ Telegram\n\n"

        "**üì¶ –í–∏–¥–µ–æ –∏ –º—É–∑—ã–∫–∞:**\n"
        "`fr!video <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å>` ‚Äî –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ\n"
        "`fr!music yt <–Ω–∞–∑–≤–∞–Ω–∏–µ>` ‚Äî –ú—É–∑—ã–∫–∞ —Å YouTube\n"
        "`fr!music sc <–Ω–∞–∑–≤–∞–Ω–∏–µ>` ‚Äî –ú—É–∑—ã–∫–∞ —Å SoundCloud\n\n"

        "**üí¨ –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –±–∞–π—Ç:**\n"
        "`fr!–∞–≤—Ç–æ—Å–º—Å <—Ç–µ–∫—Å—Ç>` ‚Äî –í –æ—Ç–≤–µ—Ç: –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "`fr!–∞–≤—Ç–æ—Å–º—Å—Å—Ç–æ–ø` ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "`fr!–±–∞–π—Ç` ‚Äî –û—Ç–≤–µ—Ç–∏—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ–º (–≤ –æ—Ç–≤–µ—Ç)\n"
        "`fr!–±–∞–π—Ç—Å—Ç–æ–ø` ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –±–∞–π—Ç\n\n"

        "**üß† –ò–ò:**\n"
        "`fr!AI <–≤–æ–ø—Ä–æ—Å>` ‚Äî –û—Ç–≤–µ—Ç –æ—Ç AI (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)\n"
        "`fr!ArtI` - –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"

        "**üë®‚Äçüíª Dev/admin (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞):**\n"
        "`fr!admin` ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤\n"
        "`fr!edit <N> <—Ç–µ–∫—Å—Ç>` ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "`fr!del <N>` ‚Äî –£–¥–∞–ª–∏—Ç—å N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "`fradmin!` ‚Äî –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–æ—Å—Ç—É–ø –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"

        "**üõ† –°–∫—Ä–∏–ø—Ç—ã (addons):**\n"
        "`fr!snos [–∫–æ–º–∞–Ω–¥–∞]` ‚Äî –ó–∞–ø—É—Å–∫ —Å–Ω–æ—Å–∞\n"
        "`fr!sn_crash` ‚Äî –ö—Ä–∞—à —Å–Ω–æ—Å–∞\n"
        "`fr!promostart` ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ\n"
        "`fr!promoplus` ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ –Ø–Ω–¥–µ–∫—Å\n\n"

        "üîí –ö–æ–º–∞–Ω–¥—ã —Å `@vip_only` —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π VIP-–ª–∏—Ü–µ–Ω–∑–∏–∏.\n"
        "üëë –ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é: @error_kill"
    )
    await event.respond(help_text, parse_mode='markdown')

@client.on(events.NewMessage(pattern=r'^fr!data(?:\s+(\S+))?(?:\s+(.+))?'))
async def data_message(event):
    filename = event.pattern_match.group(1)
    keyword = event.pattern_match.group(2)

    usage = "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
            "`fr!data <–∏–º—è_—Ñ–∞–π–ª–∞|all> <—á—Ç–æ_–∏—Å–∫–∞—Ç—å>`\n" \
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞–±–∞–∑: `fr!databases`\n" \
            "–ü—Ä–∏–º–µ—Ä:\n" \
            "`fr!data gibdd.txt ABC1234`\n" \
            "`fr!data all ABC1234`\n" \

    if not filename or not keyword:
        await event.respond(usage)
        return

    if filename != 'all':
        if '..' in filename or '/' in filename or '\\' in filename:
            await event.respond("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
            return

    keyword = keyword.upper()
    found = False
    results = []

    base_dir = os.path.join(os.path.dirname(__file__), 'databases')

    if filename == 'all':
        try:
            files = [f for f in os.listdir(base_dir) if os.path.isfile(os.path.join(base_dir, f))]
        except Exception:
            await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return

        for fname in files:
            file_path = os.path.join(base_dir, fname)
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    headers = file.readline().strip().split(',')
                    for line in file:
                        if keyword in line.upper():
                            found = True
                            data = line.strip().split(',')
                            message = f"üîç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ `{fname}` –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n**{keyword}**\n\n"
                            for header, value in zip(headers, data):
                                if header.strip() and value.strip():
                                    message += f"‚ñ™ **{header.strip()}:** {value.strip()}\n"
                            results.append(message)
            except Exception:
                continue

    else:
        file_path = os.path.join(base_dir, filename)
        if not os.path.exists(file_path):
            await event.respond(f"‚ùå –§–∞–π–ª `{filename}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                headers = file.readline().strip().split(',')
                for line in file:
                    if keyword in line.upper():
                        found = True
                        data = line.strip().split(',')
                        message = f"üîç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n**{keyword}**\n\n"
                        for header, value in zip(headers, data):
                            if header.strip() and value.strip():
                                message += f"‚ñ™ **{header.strip()}:** {value.strip()}\n"
                        results.append(message)
        except Exception:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ `{filename}`")
            return

    if not found:
        await event.respond(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É `{keyword}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        for msg in results:
            try:
                await event.respond(msg)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@client.on(events.NewMessage(pattern=r'fr!databases'))
async def databases_list(event):
    base_dir = os.path.join(os.path.dirname(__file__), 'databases')

    try:
        files = [f for f in os.listdir(base_dir) if os.path.isfile(os.path.join(base_dir, f))]
    except Exception:
        await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        return

    if not files:
        await event.respond("‚ùå –í –ø–∞–ø–∫–µ `databases` –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        return

    message = "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
    for f in files:
        message += f"‚ñ™ `{f}`\n"

    await event.respond(message)

@client.on(events.NewMessage(pattern=r'fr!info'))
async def info_message(event):
    info_message = (
        "LiteHack by @error_kill\n"
        "–û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É EYE CH EVEREN\n"
        "–í–µ—Ä—Å–∏—è: RELEASE 21\n\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å/–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: @error_kill\n"
        "–ü–æ–º–æ—â–Ω–∏–∫/–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: RonZ\n"
        "–¢–µ—Å—Ç–µ—Ä: @roskomnadzor333, @SWLGTEAM –≤—Å–µ –∫–æ–≥–æ –º—É—á–∞–ª –≤ –ª—Å –≤ —á–∞—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏)\n"
        "–§—Ä–∞–∑—ã: @error_kill, @tous111, –û—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.\n\n"
        "[fenst4r 2025]\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç—É –Ω—É–∂–µ–Ω VPN. –Ø –∏—Å–ø–æ–ª—å–∑—É—é @S1GyMAVPNBOT"
    )
    await event.respond(info_message)
   


UNCENSORED_FLAG = True
PROFILE_CHANGE_ACTIONS = {
    "update_bio", "update_username", "update_name", "edit_username",
    "set_title", "edit_message"
}

# ================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==================
logging.basicConfig(level=logging.INFO)
def log_change(action_type, details):
    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{action_type}: {details}\n")

def clear_log():
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        f.write("")

# ================== –ü—Ä–æ—Ñ–∏–ª—å ==================
def save_backup_profile(profile):
    with open(BACKUP_FILE, 'w', encoding='utf-8') as f:
        json.dump(profile, f, ensure_ascii=False, indent=2)

def load_backup_profile():
    if not os.path.exists(BACKUP_FILE):
        return None
    with open(BACKUP_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

async def get_user_profile(client, user_id):
    full = await client(functions.users.GetFullUserRequest(user_id))
    user = getattr(full, "user", None)
    profile = {
        "username": getattr(user, "username", ""),
        "first_name": getattr(user, "first_name", ""),
        "last_name": getattr(user, "last_name", ""),
        "bio": getattr(full, "about", "") or ""
    }
    return profile

# ================== –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ ==================
async def get_chat_history(client, chat_id, limit=20):
    messages = []
    async for msg in client.iter_messages(chat_id, limit=limit):
        sender = await msg.get_sender()
        sender_name = sender.first_name if sender else "Unknown"
        text = msg.text or "<–º–µ–¥–∏–∞/—Å—Ç–∏–∫–µ—Ä/–¥—Ä—É–≥–æ–µ>"
        messages.append(f"{sender_name}: {text}")
    messages.reverse()
    return "\n".join(messages)

# ================== AI ==================
async def ask_ai(message: str, profile: str = "code") -> dict:
    payload = {
        "model": MODEL_NAME,
        "profile": profile,
        "message": message,
        "flags": {"uncensored": UNCENSORED_FLAG}
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL, json=payload) as resp:
            if resp.status != 200:
                raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ API: {resp.status}")
            data = await resp.json()
    if "reply" not in data:
        raise ValueError(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ –æ—Ç AI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'reply': {data}")
    
    raw_reply = data["reply"]
    if isinstance(raw_reply, dict):
        return raw_reply
    if isinstance(raw_reply, list):
        return {"actions": raw_reply}
    
    # –í—ã—Ä–µ–∑–∞–µ–º JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏
    start = raw_reply.find('{')
    end = raw_reply.rfind('}') + 1
    if start == -1 or end == -1:
        raise ValueError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ: {raw_reply}")
    return json.loads(raw_reply[start:end])

# ================== –î–µ–π—Å—Ç–≤–∏—è ==================
async def execute_actions(event, actions):
    results = []
    for action in actions.get("actions", []):
        if not isinstance(action, dict) or len(action) != 1:
            results.append(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è: {action}")
            continue
        
        action_type = list(action.keys())[0]
        params = action[action_type]

        # –ó–∞—â–∏—Ç–∞: –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if event.sender_id not in PROTECTED_USER_ID and action_type in PROFILE_CHANGE_ACTIONS:
            results.append(f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ {action_type} –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
            continue

        try:
            if action_type == "send_message":
                await event.client.send_message(event.chat_id, params["text"])
                log_change(action_type, params["text"])
            elif action_type == "edit_message":
                await event.client.edit_message(event.chat_id, params["message_id"], params["text"])
                log_change(action_type, params)
            elif action_type == "delete_message":
                await event.client.delete_messages(event.chat_id, params["message_id"])
                log_change(action_type, params)
            elif action_type == "reply":
                await event.client.send_message(event.chat_id, params["text"], reply_to=params["message_id"])
                log_change(action_type, params)
            elif action_type == "pin_message":
                await event.client.pin_message(event.chat_id, params["message_id"])
                log_change(action_type, params)
            elif action_type == "unpin_message":
                await event.client.unpin_message(event.chat_id, params["message_id"])
                log_change(action_type, params)
            elif action_type == "edit_username":
                await event.client.edit_profile(username=params["username"])
                log_change(action_type, params)
            elif action_type == "update_bio":
                await event.client.edit_profile(about=params["text"])
                log_change(action_type, params)
            elif action_type == "update_name":
                await event.client.edit_profile(first_name=params.get("first_name"), last_name=params.get("last_name"))
                log_change(action_type, params)
            # –î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
            else:
                results.append(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")
                logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")
        except Exception as e:
            results.append(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
    if results:
        await event.reply("\n".join(results))

# ================== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ ==================
async def check_membership(client, channel_url, user_id):
    try:
        entity = await client.get_entity(channel_url)
        result = await client(functions.channels.GetParticipantRequest(channel=entity, participant=user_id))
        return True
    except ChannelPrivateError:
        print(f"[‚ö†] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ {channel_url}. –ù–∞–ø–∏—à–∏—Ç–µ: @error_kill")
        return False
    except Exception as e:
        print(f"[‚ö†] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

async def check_license_and_vip(client, user_id):
    license_ok = await check_membership(client, LICENSE_CHANNEL, user_id)
    vip_ok = await check_membership(client, VIP_CHANNEL, user_id)
    return license_ok, vip_ok

# ================== –•–µ–Ω–¥–ª–µ—Ä—ã ==================
async def setup_handlers(client):
    @client.on(events.NewMessage(pattern=r'^fr!AI(?: (.+))?$'))
    async def fr_ai_handler(event):
        user_message = event.pattern_match.group(1) or "–ü—Ä–∏–≤–µ—Ç!"
        license_ok, vip_ok = await check_license_and_vip(event.client, event.sender_id)
        if not license_ok:
            await event.reply("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return

        profile = await get_user_profile(event.client, event.sender_id)
        history_text = await get_chat_history(event.client, event.chat_id, limit=5)
        context = f"–ò—Å—Ç–æ—Ä–∏—è: {load_backup_profile()}\n–ó–∞–ø—Ä–æ—Å: {user_message}\n–î–∞–Ω–Ω—ã–µ: {profile}\n–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {history_text}"
        try:
            actions = await ask_ai(context)
            await execute_actions(event, actions)
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI: {e}")

    @client.on(events.NewMessage(pattern=r'^fr!ArtI(?: (.+))?$'))
    async def fr_arti_handler(event):
        user_message = event.pattern_match.group(1) or "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"
        profile = await get_user_profile(event.client, event.sender_id)
        history_text = await get_chat_history(event.client, event.chat_id, limit=5)
        context = f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n{history_text}\n–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n–î–∞–Ω–Ω—ã–µ: {profile}"
        try:
            actions = await ask_ai(context, profile="code")
            await execute_actions(event, actions)
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI: {e}")




@client.on(events.NewMessage(pattern=r'^fr!donate'))
async def donate_menu(event):
    donate_text = """
üí∏ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É:</b>

üôã‚Äç‚ôÇÔ∏è <b>–ê–Ω–¥—Ä–µ–π –ê.</b>  
üè¶ <b>–°–ë–ü:</b> <code>+79995371856</code>  
üí≥ <b>–ö–∞—Ä—Ç–∞ –ÆMoney:</b> <code>2204120127898183</code>  
üí∞ <b>–ö–æ—à–µ–ª—ë–∫ –ÆMoney:</b> <code>4100119171202830</code>

üßæ <b>–ß–µ–∫:</b> @CryptoBot –Ω–∞ <a href="https://t.me/error_kill">@error_kill</a>  
üîó <b>–ú—É–ª—å—Ç–∏—á–µ–∫:</b> <a href="https://t.me/send?start=IV9B9JP3AiJy">t.me/send?start=IV9B9JP3AiJy</a>
"""
    await event.reply(donate_text, parse_mode='html')

@client.on(events.NewMessage(pattern=r'^fr!license$'))
async def license(event):
    license_message = (
        f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ FENST4R –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
        f"–î–ª—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @error_kill.\n"
        f"ID —é–∑–µ—Ä–∞-—Ö–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: `{OWNER_USER_ID}`"
    )
    await event.respond(license_message)

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
if __name__ == "__main__":
    async def main():
        self_update_main_py()
        try:
            clear_screen()
            print_ascii_titles()
            print(termcolor.colored(" ü…™·¥õ·¥á ú·¥Ä·¥Ñ·¥ã 21  ô è @error_kill", "green", attrs=["bold"]))
            show_random_quote()
            print(termcolor.colored("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: fr!AI —Å gpt-4.1, frCAPTCHA", "green", attrs=["bold"]))
            print(termcolor.colored("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...", "yellow"))

            await init_bot()
            print(termcolor.colored("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", "green", attrs=["bold"]))

            await client.run_until_disconnected()
        except Exception as e:
            print(termcolor.colored(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", "red"))
            traceback.print_exc()

    asyncio.run(main())
